%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 26 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 1 /ZapfDingbats FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
6 0 /Helvetica FMFONTDEFINE
7 0 /Times-BoldItalic FMFONTDEFINE
8 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
108 597.5 504 717 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(NFS Version 3) 262.45 707.67 T
(Design and Implementation) 223.16 691.67 T
1 12 Q
(Brian Pawlowski) 264.83 673 T
(Chet Juszczak) 272.17 659 T
(Peter Staubach) 269.17 645 T
(Carl Smith) 279.83 631 T
(Diane Lebel) 276.5 617 T
(David Hitz) 279.83 603 T
2 10 Q
2.3 (Performance suffers under NFS Version 2 be-) 342.36 569.33 P
1.03 (cause the protocol requires servers to write data and) 324 557.33 P
1.3 (file system metadata to stable storage \050usually disk\051) 324 545.33 P
-0.34 (synchronously, before replying successfully to a client) 324 533.33 P
3 9 Q
10.13 (WRITE) 324 521.33 P
2 10 Q
4.69 ( request) 351 521.33 P
1 F
4.69 ([Ousterhout90]) 394.26 521.33 P
2 F
4.69 (. The performance) 457.04 521.33 P
-0.01 (problem with synchronous writes was recognized ear-) 324 509.33 P
0.35 (ly. NFS Version 2 has an artifact of a proposed inter-) 324 497.33 P
8.04 (face for asynchronous writes \050the undefined) 324 485.33 P
3 9 Q
(WRITECACHE) 324 473.33 T
2 10 Q
( procedure\051.) 378 473.33 T
2.03 (Implementations have attacked this problem in) 342.36 455.73 P
2.32 (several ways.) 324 443.73 P
1 F
2.32 ([Moran90]) 385.01 443.73 P
2 F
2.32 ( describes the Prestoserve) 430.01 443.73 P
1.15 (product, which interposes a software driver between) 324 431.73 P
0.33 (the file system and disk driver to accelerate writes by) 324 419.73 P
3.43 (using nonvolatile RAM.) 324 407.73 P
1 F
3.43 ([Juszczak94]) 433.73 407.73 P
2 F
3.43 ( describes a) 486.5 407.73 P
1.33 (technique called) 324 395.73 P
1 F
1.33 (write gathering,) 394.41 395.73 P
2 F
1.33 (which exploits the) 464.02 395.73 P
2.25 (tendency of more-capable clients to send write re-) 324 383.73 P
0.72 (quests in clusters to gain parallelism. The author im-) 324 371.73 P
0.83 (plemented a server that gathers several writes before) 324 359.73 P
1.79 (synchronously committing the data to disk, thereby) 324 347.73 P
-0.37 (amortizing the cost of synchronous writes over several) 324 335.73 P
1.15 (requests.) 324 323.73 P
1 F
1.15 ([Hitz94]) 362.92 323.73 P
2 F
1.15 ( describes an integrated file server) 397.37 323.73 P
-0.08 (design that combines a log-based file system and non-) 324 311.73 P
1.06 (volatile RAM to solve the synchronous write bottle-) 324 299.73 P
(neck.) 324 287.73 T
1.48 (Some implementations provide an \322unsafe\323 op-) 342.36 270.13 P
0.51 (tion in their NFS Version 2 server that disables com-) 324 258.13 P
-0.33 (mitting modified data to stable storage. While improv-) 324 246.13 P
-0.41 (ing performance, this option violates the stable storage) 324 234.13 P
-0.47 (guarantee in the NFS Version 2 protocol and can result) 324 222.13 P
(in data loss. This option has resulted in heated debate.) 324 210.13 T
0.98 (Lack of consistency guarantees was cited as the) 342.36 192.53 P
0.36 (cause of excessive requests over-the-wire resulting in) 324 180.53 P
8.82 (increased server loading and response time) 324 168.53 P
1 F
0.09 ([Howard88]) 324 156.53 P
2 F
0.09 (.) 374.56 156.53 P
1 F
0.09 ([Reid90]) 379.65 156.53 P
2 F
0.09 ( and) 415.76 156.53 P
1 F
0.09 ([Arnold91]) 435.39 156.53 P
2 F
0.09 ( describe addi-) 480.95 156.53 P
(tional problems with NFS Version 2.) 324 144.53 T
0 12 Q
(3.) 324 119.6 T
(The NFS Version 3 protocol) 342 119.6 T
2 10 Q
-0.13 (Engineers from several companies gathered for a two-) 324 99.33 P
-0.17 (week series of meetings in July, 1992, in Boston, MA.) 324 87.33 P
3.64 (to develop an NFS Version 3 specification. The) 324 75.33 P
0 12 Q
(Abstract) 157.67 568 T
2 10 Q
-0.59 (This paper describes a new version of the Network File) 72 548.62 P
0.2 (System \050NFS\051 that supports access to files larger than) 72 536.62 P
-0.01 (4GB and increases sequential write throughput seven-) 72 524.62 P
0.15 (fold when compared to unaccelerated NFS Version 2.) 72 512.62 P
1.22 (NFS Version 3 maintains the stateless server design) 72 500.62 P
0.42 (and simple crash recovery of NFS Version 2, and the) 72 488.62 P
0.58 (philosophy of building a distributed file service from) 72 476.62 P
1.15 (cooperating protocols. We describe the protocol and) 72 464.62 P
1.98 (its implementation, and provide initial performance) 72 452.62 P
0.87 (measurements. We then describe the implementation) 72 440.62 P
1.1 (effort. Finally, we contrast this work with other dis-) 72 428.62 P
1.53 (tributed file systems and discuss future revisions of) 72 416.62 P
(NFS.) 72 404.62 T
0 12 Q
(1.) 72 380.57 T
(Introduction) 90 380.57 T
2 9 Q
-0.32 (\322It is common sense to take a method and try it.) 90 367.86 P
(If it fails, admit it frankly and try another) 90 356.86 T
(. But) 237.74 356.86 T
(above all, try something.\323) 90 345.86 T
1 F
(Roosevelt, 1932) 185.49 345.86 T
2 10 Q
-0.22 (The NFS protocol is a collection of remote procedures) 72 327.48 P
0.62 (that allow a client to transparently access files stored) 72 315.48 P
0.1 (on a server) 72 303.48 P
1 F
0.1 ([Joy84a]) 118.66 303.48 P
2 F
0.1 (. It is independent of architecture) 155.32 303.48 P
1 F
0.2 ([RFC1014]) 72 291.48 P
2 F
0.2 (, operating system, network, and transport) 118.67 291.48 P
0.37 (protocol. The protocol does not exactly match the se-) 72 279.48 P
0.54 (mantics of any existing system. Instead, it provides a) 72 267.48 P
(basis for portability and interoperability.) 72 255.48 T
-0.22 (NFS V) 90.36 238.76 P
-0.22 (ersion 1 existed only within Sun Microsys-) 117.09 238.76 P
0.42 (tems and was never released. NFS V) 72 226.76 P
0.42 (ersion 2 was im-) 220.35 226.76 P
1.31 (plemented in 1984 and released with) 72 214.76 P
1.31 (SunOS 2.0, in) 229.26 214.76 P
0.64 (1985) 72 202.76 P
1 F
0.64 ([Sandberg85]) 95.14 202.76 P
2 F
0.64 (.) 151.25 202.76 P
0.64 ( NFS Version 2 implementations) 153.75 202.76 P
-0.25 (exist for a variety of machines, from personal comput-) 72 190.76 P
(ers to supercomputers.) 72 178.76 T
0 12 Q
(2.) 72 154.71 T
(NFS Version 2 protocol problems) 90 154.71 T
2 10 Q
2.07 (Several problems in NFS Version 2 could only be) 72 135.33 P
-0.56 (solved through a new version of the protocol. The 4GB) 72 123.33 P
2.33 (file size limitation has recently become a pressing) 72 111.33 P
0.58 (problem, although implementations of NFS on larger) 72 99.33 P
1.1 (machines such as Cray supercomputers exposed this) 72 87.33 P
(limitation years ago.) 72 75.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
0.75 (group\325s goal was to address compelling issues in the) 72 713.33 P
-0.57 (current protocol that could not be solved by implemen-) 72 701.33 P
-0.33 (tation practice. T) 72 689.33 P
-0.33 (he only absolute requirement was 64-) 139.39 689.33 P
(bit \336le size support.) 72 677.33 T
-0.29 (Other issues under consideration included the fol-) 90.36 660.93 P
(lowing:) 72 648.93 T
(\245) 72 632.53 T
(Solving the write throughput bottleneck) 81 632.53 T
(\245) 72 620.13 T
1.82 (Minimizing the work needed to create an NFS) 81 620.13 P
0.31 (Version 3 implementation given an existing NFS) 81 608.13 P
(Version 2 implementation) 81 596.13 T
(\245) 72 583.73 T
-0.24 (Ensuring that implementation of the new protocol) 81 583.73 P
1.71 (is) 81 571.73 P
1.71 (feasible on less-capable client operating sys-) 91.88 571.73 P
(tems \050for example, DOS\051) 81 559.73 T
(\245) 72 547.33 T
2.14 (Completely documenting the resulting protocol) 81 547.33 P
0.99 (and annotating it with implementation examples) 81 535.33 P
(to aid developers) 81 523.33 T
(\245) 72 510.93 T
-0.14 (Deferring new features to subsequent revisions of) 81 510.93 P
(NFS due to time constraints) 81 498.93 T
(Above all, the driving principles were the following:) 72 480.53 T
(\245) 72 464.13 T
(Keep it simple) 81 464.13 T
(\245) 72 451.73 T
(Get it done in a year) 81 451.73 T
(\245) 72 439.33 T
(Avoid anything controversial) 81 439.33 T
1.23 (Although it wasn\325t an absolute requirement, we) 90.36 422.93 P
-0.37 (felt that solving the write throughput bottleneck would) 72 410.93 P
(provide the most compelling feature.) 72 398.93 T
0 12 Q
(3.1.) 72 377.2 T
(Changes introduced) 103.5 377.2 T
2 10 Q
0.13 (NFS Version 3 represents an evolution of the existing) 72 358.13 P
0.86 (NFS Version 2 protocol. Most of the original design) 72 346.13 P
2.71 (features described in) 72 334.13 P
1 F
2.71 ([Joy84a]) 165.37 334.13 P
2 F
2.71 (,) 202.03 334.13 P
1 F
2.71 ([Sandberg85]) 209.74 334.13 P
2 F
2.71 (, and) 265.85 334.13 P
1 F
1.23 ([RFC1094]) 72 322.13 P
2 F
1.23 ( persist. This revision introduces the fol-) 118.67 322.13 P
(lowing major changes:) 72 310.13 T
(\245) 72 293.73 T
0.61 (Sizes and offsets are widened from 32 bits to 64) 81 293.73 P
(bits.) 81 281.73 T
(\245) 72 269.33 T
-0.41 (The) 81 269.33 P
3 9 Q
-0.89 (WRITE) 98.64 269.33 P
2 10 Q
-0.41 ( and) 125.64 269.33 P
3 9 Q
-0.89 (COMMIT) 144.26 269.33 P
2 10 Q
-0.41 ( procedures allow reliable) 176.65 269.33 P
(asynchronous writes.) 81 257.33 T
(\245) 72 244.93 T
0.48 (A new) 81 244.93 P
3 9 Q
1.03 (ACCESS) 110.83 244.93 P
2 10 Q
0.48 ( procedure fixes known problems) 143.23 244.93 P
1.33 (with super-user permission mapping and allows) 81 232.93 P
0.95 (servers to return file access permission errors to) 81 220.93 P
0.55 (the client at file open time to provide better sup-) 81 208.93 P
4.57 (port for systems with Access Control Lists) 81 196.93 P
(\050ACLs\051.) 81 184.93 T
(\245) 72 172.53 T
0.16 (All operations now return attributes to reduce the) 81 172.53 P
(number of subsequent) 81 160.53 T
3 9 Q
(GETATTR) 171.82 160.53 T
2 10 Q
( procedure calls.) 209.62 160.53 T
(\245) 72 148.13 T
1.77 (The 8KB data size limitation on the) 81 148.13 P
3 9 Q
3.83 (READ) 238.69 148.13 P
2 10 Q
1.77 ( and) 260.29 148.13 P
3 9 Q
(WRITE) 81 136.13 T
2 10 Q
( procedures is relaxed.) 108 136.13 T
(\245) 72 123.73 T
0.14 (A new) 81 123.73 P
3 9 Q
0.31 (READDIRPLUS) 110.17 123.73 P
2 10 Q
0.14 ( procedure returns both file) 169.57 123.73 P
1.49 (handle and attributes to eliminate) 81 111.73 P
3 9 Q
3.22 (LOOKUP) 224.28 111.73 P
2 10 Q
1.49 ( calls) 256.68 111.73 P
(when scanning a directory.) 81 99.73 T
(\245) 72 87.33 T
-0.25 (File handles are of variable length, up to 64 bytes,) 81 87.33 P
13.39 (as needed by some implementations) 81 75.33 P
1 F
2.87 ([Pawlowski89]) 333 713.18 P
2 F
2.87 (. \050We kept the file handle size) 394.12 713.18 P
-0.33 (small enough to allow efficient DOS implementa-) 333 701.18 P
(tions.\051) 333 689.18 T
(\245) 324 676.79 T
(Exclusive) 333 676.79 T
3 9 Q
(CREATE) 374.94 676.79 T
2 10 Q
( requests are supported.) 407.34 676.79 T
(\245) 324 664.4 T
0.73 (File names and path names are now specified as) 333 664.4 P
2.95 (strings of variable length, with the maximum) 333 652.4 P
1.62 (length negotiated between the client and server) 333 640.4 P
(\050with the) 333 628.24 T
3 9 Q
(PATHCONF) 371.33 628.24 T
1 10 Q
([POSIX90]) 417.03 628.24 T
2 F
( procedure\051.) 462.58 628.24 T
(\245) 324 615.85 T
-0.24 (The errors the server can return are enumerated in) 333 615.85 P
(the specification\321no others are allowed.) 333 603.85 T
(\245) 324 591.46 T
2.53 (The notion of blocks is discarded in favor of) 333 591.46 P
(bytes.) 333 579.46 T
(\245) 324 567.07 T
1.68 (The new) 333 567.07 P
3 9 Q
3.64 (NFS3ERR_JUKEBOX) 373.58 567.07 P
2 10 Q
1.68 ( error informs cli-) 454.58 567.07 P
0.8 (ents that a file is currently off-line and that they) 333 555.07 P
(should try again later.) 333 543.07 T
-0.5 (Appendix 1 provides a summary of the protocol differ-) 324 524.68 P
-0.43 (ences between NFS Version 2 and NFS Version) 324 512.68 P
-0.43 (3. Re-) 515.99 512.68 P
(fer to) 324 500.68 T
1 F
([NFS3]) 347.88 500.68 T
2 F
( for more details.) 378.44 500.68 T
-0.47 (At least eight new versions of NFS have been pro-) 342.36 484.29 P
0.85 (posed to fix NFS Version 2, none of which has ever) 324 472.29 P
0.96 (been completely implemented. Public reviews of the) 324 460.29 P
0.19 (draft versions of new protocol specifications have oc-) 324 448.29 P
-0.24 (curred continuously since early 1987. Several changes) 324 436.29 P
-0.53 (included in NFS Version 3 first appeared in those eight) 324 424.29 P
(drafts.) 324 412.29 T
0 12 Q
(3.2.) 324 390.56 T
(What was avoided) 355.5 390.56 T
2 9 Q
(\322Let joy and innocence prevail.\323) 342 378.17 T
1 F
(T) 461.47 378.17 T
(oys, 1993) 465.64 378.17 T
2 10 Q
-0.56 (In the years since the NFS protocol was first described,) 324 360.11 P
-0.4 (implementation practice solved several problems orig-) 324 348.11 P
0.22 (inally thought to require a protocol revision, although) 324 336.11 P
0.47 (minor, undocumented changes were made to the pro-) 324 324.12 P
0.06 (tocol without a formal revision. In practice, NFS Ver-) 324 312.12 P
0.22 (sion 2 mostly works, and we tried not to break it. Ac-) 324 300.12 P
0.15 (cepting common implementation practice reduced the) 324 288.12 P
-0.11 (number of changes needed to produce NFS Version 3.) 324 276.12 P
-0.05 (Minor protocol changes were cleaned up and incorpo-) 324 264.12 P
(rated into this work.) 324 252.12 T
0.82 (We decided to maintain the current stateless de-) 342.36 235.72 P
0.51 (sign of NFS and not include strict cache consistency.) 324 223.72 P
1.14 (When we defined NFS Version 3, research work on) 324 211.72 P
0.31 (consistent versions of NFS was incomplete. Delaying) 324 199.72 P
0.41 (support for 64-bit file sizes to explore adding stateful) 324 187.72 P
0.82 (consistency was unacceptable. In addition, it seemed) 324 175.72 P
-0.2 (clear that supporting strict data consistency introduces) 324 163.72 P
1.04 (complexities that would preclude implementation on) 324 151.72 P
-0.21 (less-capable clients. Finally, the recovery benefits of a) 324 139.72 P
0.1 (stateless server were clear, while the issues of stateful) 324 127.72 P
(recovery were not.) 324 115.72 T
-0.29 (The stateless server design of NFS creates a prob-) 342.36 99.33 P
-0.01 (lem with the replaying of nonidempotent requests. An) 324 87.33 P
-0.31 (idempotent request such as) 324 75.33 P
3 9 Q
-0.68 (LOOKUP) 433.29 75.33 P
2 10 Q
-0.31 ( can be successful-) 465.69 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
-0.39 (ly executed any number of times. A nonidempotent re-) 72 713.33 P
1.51 (quest such as) 72 701.33 P
3 9 Q
3.27 (REMOVE) 131.81 701.33 P
2 10 Q
1.51 ( can be successfully executed) 164.21 701.33 P
-0.53 (only once. Primarily a correctness problem, this condi-) 72 689.33 P
0.44 (tion has been solved through the use of a reply cache) 72 677.33 P
7.95 (of recently serviced requests on the server) 72 665.33 P
1 F
-0.62 ([Juszczak89]) 72 653.33 P
2 F
-0.62 (. Proposed protocol extensions to NFS at-) 124.77 653.33 P
-0.46 (tempted to fix this but were essentially misguided. The) 72 641.33 P
0.48 (Boston group simply acknowledged the effectiveness) 72 629.33 P
0.11 (of this implementation technique and left the protocol) 72 617.33 P
(alone.) 72 605.33 T
0.34 (Many other changes to NFS Version 2 were pro-) 90.36 589.1 P
-0.46 (posed in the eight protocol revisions, including the fol-) 72 577.1 P
(lowing:) 72 565.1 T
(\245) 72 548.86 T
(The) 81 548.86 T
3 F
(ZERO) 99.05 548.86 T
2 F
( procedure to punch holes in a file) 123.05 548.86 T
(\245) 72 536.63 T
(Append mode writes) 81 536.63 T
(\245) 72 524.39 T
(Record-oriented I/O support) 81 524.39 T
(\245) 72 512.16 T
(File name to include versions) 81 512.16 T
(\245) 72 499.92 T
(User and group fields as strings) 81 499.92 T
(\245) 72 487.69 T
(Extended attributes \050arbitrary key/value pairs\051) 81 487.69 T
(\245) 72 475.45 T
(Well-defined UID mapping procedures) 81 475.45 T
(\245) 72 463.22 T
(Advisory close procedure) 81 463.22 T
(\245) 72 450.98 T
(Resource fork support for the Macintosh) 81 450.98 T
(\245) 72 438.74 T
(Multiple OS-dependent name spaces) 81 438.74 T
(\245) 72 426.51 T
(A get server statistics procedure) 81 426.51 T
-0.61 (Most of the above proposed features were rejected) 90.36 410.27 P
2.12 (because by 1992 implementers had worked around) 72 398.27 P
1.93 (purported \322protocol limitations\323 that would prevent) 72 386.27 P
0.65 (implementations on non-UNIX platforms. Other pro-) 72 374.27 P
0.04 (posed features above were rejected because they were) 72 362.27 P
1.02 (specific to a single operating system. The remaining) 72 350.27 P
2.59 (proposed features were discarded because they at-) 72 338.27 P
-0.43 (tempted to solve a problem simplistically that was best) 72 326.27 P
2.07 (solved correctly \050for example, append mode writes) 72 314.27 P
(versus a full consistency protocol\051.) 72 302.27 T
0 12 Q
(4.) 72 278.71 T
(Design and implementation) 90 278.71 T
2 10 Q
-0.07 (NFS Version 3 defines a revision to NFS Version 2; it) 72 259.8 P
0.21 (does not provide a new model for distributed file sys-) 72 247.8 P
0.34 (tems. Because of this, NFS Version 3 resembles NFS) 72 235.8 P
0.02 (Version 2 in design assumptions, file system and con-) 72 223.8 P
-0.09 (sistency model, and method of recovering from server) 72 211.8 P
0.47 (crashes. For a general description of the implementa-) 72 199.8 P
2.9 (tion issues of NFS, see) 72 187.8 P
1 F
2.9 ([Sandberg85]) 180.38 187.8 P
2 F
2.9 (,) 236.49 187.8 P
1 F
2.9 ([Israel89]) 244.39 187.8 P
2 F
2.9 (,) 285.5 187.8 P
1 F
6.08 ([Juszczak89]) 72 175.8 P
2 F
6.08 (,) 124.77 175.8 P
1 F
6.08 ([Pawlowski89]) 135.85 175.8 P
2 F
6.08 (,) 196.97 175.8 P
1 F
6.08 ([Macklem91]) 208.05 175.8 P
2 F
6.08 (, and) 262.48 175.8 P
1 F
([Juszczak94]) 72 163.8 T
2 F
(.) 124.77 163.8 T
0 12 Q
(4.1.) 72 142.23 T
(NFS design) 103.5 142.23 T
2 10 Q
0.08 (NFS achieves architecture and operating system inde-) 72 123.33 P
1.46 (pendence through a strict separation of the protocol) 72 111.33 P
0.94 (and its implementation. The protocol is the interface) 72 99.33 P
0.86 (by which clients access files on a server. A client or) 72 87.33 P
0.58 (server implements the protocol by mapping local file) 72 75.33 P
0.75 (system actions into the file system model defined by) 324 713.33 P
0.18 (NFS. The NFS protocol does not dictate how a server) 324 701.33 P
-0.53 (implements the interface or how a client should use the) 324 689.33 P
0.37 (interface) 324 677.33 P
1 F
0.37 ([Satyanarayanan89]) 361.85 677.33 P
2 F
0.37 (. For example, the NFS) 445.18 677.33 P
-0.35 (Version 3 protocol does not define how a client should) 324 665.33 P
-0.53 (manage cached data, but it does provide information to) 324 653.33 P
(improve cache management.) 324 641.33 T
0.9 (Although implementations have been used to il-) 342.36 624.13 P
0.31 (lustrate aspects of the NFS protocol, the specification) 324 612.13 P
0.14 (itself is the final description of how clients should ac-) 324 600.13 P
0.79 (cess servers. Semantic details that were not fully de-) 324 588.13 P
-0.45 (scribed in the NFS Version 2 specification) 324 576.13 P
1 F
-0.45 ([RFC1094]) 493.33 576.13 P
2 F
-0.12 (have proven, in practice, not to be a problem and have) 324 564.13 P
-0.52 (been worked out through interoperability testing. Most) 324 552.13 P
0.23 (problems are flaws in implementations, instead of the) 324 540.13 P
(protocol design.) 324 528.13 T
-0.47 (The NFS protocol is stateless; that is, each request) 342.36 510.92 P
0.73 (contains sufficient information to be completely pro-) 324 498.92 P
1.82 (cessed without regard to other requests. The server) 324 486.92 P
0.02 (does not need to maintain state about any previous re-) 324 474.92 P
1.46 (quests) 324 462.92 P
2 8 Q
1.17 (1) 349 466.92 P
2 10 Q
1.46 ( other than file data on stable storage, and a) 353 462.92 P
0.39 (map of file handles \050opaque tokens used by clients to) 324 450.92 P
0.24 (access files\051 to files derived from file system data. Of) 324 438.92 P
-0.01 (course, most servers cache file data that has been syn-) 324 426.92 P
0.64 (chronized to disk to improve performance. However,) 324 414.92 P
(this cached data is not needed for correct operation.) 324 402.92 T
1.97 (Server crash recovery is simple. A client need) 342.36 385.72 P
-0.47 (only retry a request until the server responds; the client) 324 373.72 P
0.55 (does not know that the server has rebooted \050although) 324 361.72 P
-0.01 (the user may notice delayed responses\051. Experience at) 324 349.72 P
-0.07 (Sun with) 324 337.72 P
1 F
-0.07 (network disk \050nd) 362.2 337.72 P
2 F
-0.07 (\051, an earlier method of shar-) 428.72 337.72 P
-0.26 (ing disk storage on a network, led to the stateless serv-) 324 325.72 P
(er requirement in the initial design of NFS) 324 313.72 T
1 F
([Joy84b]) 496.21 313.72 T
2 F
(.) 532.87 313.72 T
0.74 (The NFS Version 3 protocol requires that modi-) 342.36 296.51 P
0.05 (fied data on the server be flushed to stable storage be-) 324 284.51 P
-0.1 (fore replying. Only asynchronous writes are excepted.) 324 272.51 P
0.39 (NFS clients block on) 324 260.51 P
1 F
0.39 (close\0502\051) 412.23 260.51 P
2 F
0.39 ( until all data is flushed) 444.44 260.51 P
0.47 (to stable storage on the server, to return any errors to) 324 248.51 P
-0.05 (the application that might occur during delayed writes) 324 236.51 P
(\050for example, out of space\051.) 324 224.51 T
0.62 (NFS clients are decidedly not stateless. NFS cli-) 342.36 207.31 P
-0.51 (ents hold modified data that has not been flushed to the) 324 195.31 P
-0.13 (server as well as cache file handles and attributes. Cli-) 324 183.31 P
1.57 (ents typically use attribute information, such as file) 324 171.31 P
3.04 (modification time, to validate cached information.) 324 159.31 P
0.09 (When a client crashes no recovery is necessary for ei-) 324 147.31 P
(ther the client or the server.) 324 135.31 T
0 0 0 1 0 0 0 K
324 117 540 131.98 C
0 0 0 1 0 0 0 K
333 129.96 477 129.96 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
2 6.4 Q
0 X
0 0 0 1 0 0 0 K
0.49 (1) 324 114.87 P
2 8 Q
0.62 (To be precise, the reply cache on a server contains volatile state) 329.29 111.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (needed for correctness) 324 102.67 P
1 F
-0.24 ([Kazar94]) 397.24 102.67 P
2 F
-0.24 (. See) 431.02 102.67 P
1 F
-0.24 ([Bhide91]) 448.08 102.67 P
2 F
-0.24 ( for further discus-) 480.97 102.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.47 (sion on the reply cache and its implications for server correctness.) 324 93.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.14 (TCP-based implementations of NFS still need a reply cache to pre-) 324 84.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vent destructive replay following connection re-establishment.) 324 75.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
0.09 (Thus, NFS servers are stupid and NFS clients are) 90.36 713.33 P
0.65 (smart. NFS Version 3 offers the possibility of poten-) 72 701.33 P
(tially smarter clients.) 72 689.33 T
0 12 Q
(4.2.) 72 668 T
(Multiple version support) 103.5 668 T
2 10 Q
0.63 (The Remote Procedure Call \050RPC\051 protocol provides) 72 649.33 P
2.73 (explicit support for multiple versions of a service) 72 637.33 P
1 F
0.03 ([RFC1057]) 72 625.33 P
2 F
0.03 (. The client and server implementations of) 118.67 625.33 P
0.91 (NFS Version 3 provide backward compatibility with) 72 613.33 P
-0.17 (NFS Version 2 by supporting) 72 601.33 P
1 F
-0.17 (both) 191.45 601.33 P
2 F
-0.17 ( NFS Version 2 and) 209.23 601.33 P
0.51 (NFS Version 3. By default, an RPC client and server) 72 589.33 P
0.4 (bind using the highest version number they both sup-) 72 577.33 P
-0.41 (port. Client or server implementations that cannot sup-) 72 565.33 P
1.35 (port both versions \050for example, due to memory re-) 72 553.33 P
(strictions\051 should support NFS Version 2.) 72 541.33 T
0 12 Q
(4.3.) 72 520 T
(Implementation issues) 103.5 520 T
2 10 Q
-0.56 (A primary goal in restricting the changes between NFS) 72 501.33 P
1.07 (Version 2 and NFS Version 3 was to minimize new) 72 489.33 P
0.09 (implementation issues. Implementation issues exist in) 72 477.33 P
(the following areas:) 72 465.33 T
(\245) 72 449.33 T
(64-bit file sizes and offsets) 81 449.33 T
(\245) 72 437.33 T
(Asynchronous writes) 81 437.33 T
(\245) 72 425.33 T
3 9 Q
(READDIRPLUS) 81 425.33 T
2 10 Q
(\321read directory with attributes) 140.4 425.33 T
(\245) 72 413.33 T
3 9 Q
(NFS3ERR_JUKEBOX) 81 413.33 T
2 10 Q
(\245) 72 401.33 T
(Weak cache consistency) 81 401.33 T
(\245) 72 389.33 T
(Other issues) 81 389.33 T
0 F
(4.3.1) 72 369.33 T
(64-bit file sizes and offsets) 103.17 369.33 T
2 F
2.33 (The 64-bit extensions in NFS Version 3 introduce) 72 351.33 P
-0.41 (problems with mismatched clients and servers, such as) 72 339.33 P
-0.46 (a 32-bit client and a 64-bit server, or a 64-bit client and) 72 327.33 P
(a 32-bit server.) 72 315.33 T
0.7 (A 64-bit client will never encounter a file that it) 90.36 299.33 P
0.02 (cannot handle when using a 32-bit server. If it sends a) 72 287.33 P
-0.46 (request that the server cannot handle, the server should) 72 275.33 P
(return) 72 263.33 T
3 9 Q
(NFS3ERR_FBIG) 98.38 263.33 T
2 10 Q
(.) 163.18 263.33 T
-0.48 (The problems posed by a 32-bit client and a 64-bit) 90.36 247.33 P
0.73 (server are more difficult. The server can handle any-) 72 235.33 P
0.27 (thing that the client can generate. However, the client) 72 223.33 P
-0.45 (cannot handle a file whose size can not be expressed in) 72 211.33 P
-0.59 (32-bits, and will not properly decode the size of the file) 72 199.33 P
-0.57 (into its local attributes structure. One solution is for the) 72 187.33 P
0.33 (client to deny access to any file whose size cannot be) 72 175.33 P
1.26 (expressed in) 72 163.33 P
1.26 (32) 126.72 163.33 P
1.26 ( bits. This introduces anomalous be-) 136.72 163.33 P
-0.01 (havior when a file is extended by the client beyond its) 72 151.33 P
(limit, thus rendering the file inaccessible.) 72 139.33 T
0.26 (Another solution is for the client to map any size) 90.36 123.33 P
0.32 (greater than it can handle to the maximum size that it) 72 111.33 P
0.31 (can handle, effectively \322lying\323 to the application pro-) 72 99.33 P
-0.26 (gram. This allows the application access to as much of) 72 87.33 P
0.65 (the file as possible given the 32-bit offset restriction.) 72 75.33 P
1.18 (Although this solution eliminates the anomalous be-) 324 713.33 P
0.23 (havior described in the first solution, it introduces the) 324 701.33 P
-0.01 (problem that a client might be able to access only part) 324 689.33 P
(of a file. However, other solutions exist.) 324 677.33 T
0 F
(4.3.2) 324 656.19 T
(Asynchronous writes) 355.17 656.19 T
2 F
-0.37 (NFS Version 3 asynchronous writes eliminate the syn-) 324 637.05 P
0.44 (chronous write bottleneck in NFS Version 2. When a) 324 625.05 P
0.9 (server receives an asynchronous) 324 613.05 P
3 9 Q
1.93 (WRITE) 459.2 613.05 P
2 10 Q
0.9 ( request, it is) 486.2 613.05 P
-0.15 (permitted to reply to the client immediately. Later, the) 324 601.05 P
0.87 (client sends a) 324 589.05 P
3 9 Q
1.87 (COMMIT) 382.98 589.05 P
2 10 Q
0.87 ( request to verify that the data) 415.38 589.05 P
-0.35 (has reached stable storage; the server must not reply to) 324 577.05 P
(the) 324 565.05 T
3 9 Q
(COMMIT) 338.72 565.05 T
2 10 Q
( until it safely stores the data.) 371.12 565.05 T
-0.45 (Asynchronous writes as defined in NFS Version 3) 342.36 547.91 P
1.54 (are most effective for large files. A client can send) 324 535.91 P
0.1 (many) 324 523.91 P
3 9 Q
0.21 (WRITE) 348.82 523.91 P
2 10 Q
0.1 ( requests, and then send a single) 375.82 523.91 P
3 9 Q
0.21 (COMMIT) 507.6 523.91 P
2 10 Q
0.75 (to flush the entire file to disk when it closes the file.) 324 511.9 P
-0.31 (This allows the server to do a single large write, which) 324 499.9 P
-0.08 (most file systems handle much more efficiently than a) 324 487.9 P
0.64 (series of small writes. For very large files, the server) 324 475.9 P
-0.19 (can flush data in the background so that most of it will) 324 463.9 P
(already be on disk when the) 324 451.9 T
3 9 Q
(COMMIT) 438.42 451.9 T
2 10 Q
( request arrives.) 470.82 451.9 T
6.36 (Asynchronous writes are optional in NFS) 342.36 434.76 P
1.38 (Version) 324 422.76 P
1.38 (3, and specific client or server implementa-) 358.16 422.76 P
0.61 (tions can choose not to support this feature. A server) 324 410.76 P
-0.5 (can choose to flush asynchronous write requests to sta-) 324 398.76 P
-0.17 (ble storage. In this case, the server indicates this in the) 324 386.76 P
3 9 Q
-0.48 (WRITE) 324 374.76 P
2 10 Q
-0.22 ( reply. Clients with insufficient memory to sup-) 351 374.76 P
0.51 (port the necessary buffering required for server crash) 324 362.76 P
(recovery can always request synchronous writes.) 324 350.76 T
0 F
(4.3.2.1) 324 327.62 T
(Crash recovery) 369 327.62 T
2 F
0.66 (The design of asynchronous writes is consistent with) 324 308.48 P
0.3 (the stupid server and smart client philosophy of NFS.) 324 296.48 P
0.05 (The client is required to keep a copy of all uncommit-) 324 284.48 P
0.38 (ted data to support recovery following a server crash.) 324 272.48 P
0.2 (The replies for) 324 260.48 P
3 9 Q
0.44 (WRITE) 385.98 260.48 P
2 10 Q
0.2 ( and) 412.98 260.48 P
3 9 Q
0.44 (COMMIT) 432.83 260.48 P
2 10 Q
0.2 ( requests include a) 465.23 260.48 P
1 F
0.44 (write verifier) 324 248.48 P
2 F
0.44 ( that clients use to detect server crashes.) 376.94 248.48 P
1.44 (The write verifier is an 8-byte value that the server) 324 236.48 P
0.68 (must change whenever it crashes. Servers commonly) 324 224.48 P
1.47 (use their boot time as a write verifier, because it is) 324 212.48 P
1.21 (guaranteed to be unique after each crash. The client) 324 200.48 P
-0.56 (must save the write verifier returned by each asynchro-) 324 188.48 P
-0.14 (nous) 324 176.48 P
3 9 Q
-0.3 (WRITE) 345.25 176.48 P
2 10 Q
-0.14 ( request and compare it to the write verifi-) 372.25 176.48 P
-0.16 (er returned by a later) 324 164.48 P
3 9 Q
-0.35 (COMMIT) 408.99 164.48 P
2 10 Q
-0.16 ( request. If the write ver-) 441.39 164.48 P
1.22 (ifiers do not match, then the client assumes that the) 324 152.48 P
(server has crashed and rebooted.) 324 140.48 T
0.26 (The client must then rewrite all uncommitted da-) 342.36 123.33 P
0.16 (ta. Clients can push data with synchronous writes fol-) 324 111.33 P
1.1 (lowing server failure. The client can delay rewriting) 324 99.33 P
0.1 (data when it detects a crash to avoid flooding a newly) 324 87.33 P
0.42 (rebooted server with) 324 75.33 P
3 9 Q
0.9 (WRITE) 409.95 75.33 P
2 10 Q
0.42 ( requests. Figure 1 shows) 436.95 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 493 540 719.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 493 540 719.33 R
7 X
0 0 0 1 0 0 0 K
V
90 450 27 27 104.28 641.73 G
0.5 H
2 Z
0 X
90 450 27 27 104.28 641.73 A
2 8 Q
(page is clean) 83.61 639 T
7 X
90 450 27 27 246.94 642.75 G
0 X
90 450 27 27 246.94 642.75 A
(page is dirty) 227.17 644.89 T
209.13 645.03 220.67 641.73 209.13 638.42 209.13 641.73 4 Y
V
131.44 641.73 209.13 641.73 2 L
N
4 10 Q
(\254) 135.09 631.12 T
2 8 Q
(application) 145.19 631.12 T
1 F
( write\0502\051) 180.74 631.12 T
7 X
90 450 27 27 380.94 641.5 G
0 X
90 450 27 27 380.94 641.5 A
2 F
(page is written) 357.39 638.78 T
(\336le normal) 229.5 636.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
342.46 645.03 354 641.73 342.46 638.42 342.46 641.73 4 Y
V
275 641.73 342.46 641.73 2 L
N
7 X
90 450 27 27 506.94 642.17 G
0 X
90 450 27 27 506.94 642.17 A
(page is dirty) 487.17 648.31 T
469.13 645.03 480.67 641.73 469.13 638.42 469.13 641.73 4 Y
V
408.33 641.73 469.13 641.73 2 L
N
4 10 Q
(\255) 274.9 631.14 T
2 8 Q
( asynchronous) 282.78 631.14 T
3 7 Q
(WRITE) 330.77 631.14 T
2 8 Q
(client) 497.05 640.31 T
(\336le in recovery) 482.73 632.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(\270) 419.86 631.14 T
2 8 Q
( unsuccessful) 427.74 631.14 T
110.49 678.02 104 668 104.2 679.94 107.35 678.98 4 Y
V
505.33 669.05 M
 505.33 708.68 397.02 709.04 307.99 708.68 D
 230.21 708.36 127.12 708.61 107.35 678.98 D
N
103.88 603.08 104.67 615.04 110.34 604.48 107.11 603.78 4 Y
V
381.33 613.99 M
 381.33 574.36 306.66 574 245.29 574.36 D
 191.85 574.67 121.07 574.42 107.11 603.77 D
N
4 10 Q
(\257) 269.8 696.42 T
2 8 Q
( synchronous) 277.68 696.42 T
3 7 Q
(WRITE) 322.12 696.42 T
4 10 Q
(\256) 215.6 581.23 T
2 8 Q
( successful) 223.48 581.23 T
3 7 Q
(COMMIT) 260.36 581.23 T
87 494.33 526.04 564.58 R
7 X
V
0 8 Q
0 X
-0.37 (Figure 1.) 87 559.25 P
-0.37 (Client page states with asynchronous writes \050The Digital OSF/1 implementation\051.) 118.92 559.25 P
2 F
-0.37 (This diagram shows the state changes that) 393.63 559.25 P
0.03 (occur as a page of memory containing file data is modified, written, and then committed.) 87 549.25 P
4 10 Q
0.05 (\254) 374.13 549.25 P
2 8 Q
0.03 (A local application modifies the page, and it) 384.05 549.25 P
-0.2 (is marked dirty.) 87 539.25 P
4 10 Q
-0.27 (\255) 138.85 539.25 P
2 8 Q
-0.2 ( The client asynchronously writes the data to the server. T) 146.73 539.25 P
-0.2 (he client stores the) 330.29 539.25 P
-0.2 (write verifier from the asynchronous write) 391.28 539.25 P
-0.22 (request with each page) 87 529.25 P
-0.22 (.) 159.43 529.25 P
-0.22 (An explicit) 163.21 529.25 P
1 F
-0.22 (msync\0502\051) 200.54 529.25 P
2 F
-0.22 (,) 229.86 529.25 P
1 F
-0.22 (fsync\0502\051) 233.64 529.25 P
2 F
-0.22 ( or) 259.41 529.25 P
1 F
-0.22 (close\0502\051) 269.63 529.25 P
2 F
-0.22 ( from the application, a file system sync, or page reclamation will trigger) 295.4 529.25 P
0.11 (a) 87 519.25 P
3 F
0.26 (COMMIT) 92.66 519.25 P
2 F
0.11 (.) 121.46 519.25 P
0.11 (The write verifier returned from the) 125.57 519.25 P
3 F
0.26 (COMMIT) 242.64 519.25 P
2 F
0.11 ( request is compared against those stored with the written pages.) 271.44 519.25 P
4 10 Q
0.15 (\256) 480.62 519.25 P
2 8 Q
0.11 ( The page\325s) 488.5 519.25 P
-0.05 (write verifier matches the returned verifier, and the commit succeeds.) 87 509.25 P
4 10 Q
-0.07 (\270) 310.85 509.25 P
2 8 Q
-0.05 ( The write verifier for the page does not match the returned write) 318.73 509.25 P
(verifier, triggering recovery.) 87 499.25 T
4 10 Q
(\257) 180.08 499.25 T
2 8 Q
( The client synchronously writes the data to the server.) 187.96 499.25 T
3 7 Q
(COMMIT) 432.64 623.02 T
0 0 612 792 C
72 72 288 479.9 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
-0 (the state changes that occur as a page of memory con-) 72 473.24 P
0.08 (taining file data is modified, written to the server, and) 72 461.04 P
(then committed.) 72 448.85 T
0 F
(4.3.2.2) 72 420.85 T
(Server details) 117 420.85 T
2 F
0.96 (An NFS Version 3 server makes the following three) 72 396.85 P
(guarantees:) 72 384.65 T
(\245) 72 362.65 T
0.15 (For a synchronous) 81 362.65 P
3 9 Q
0.32 (WRITE) 157.82 362.65 P
2 10 Q
0.15 ( request, the server will) 184.82 362.65 P
1.82 (commit to stable storage all data and modified) 81 350.46 P
(metadata.) 81 338.26 T
(\245) 72 320.26 T
2.73 (The server will not discard uncommitted data) 81 320.26 P
(without changing the write verifier.) 81 308.07 T
(\245) 72 290.07 T
0.52 (The server will commit the file\325s data and modi-) 81 290.07 P
-0.1 (fied metadata to stable storage for the range spec-) 81 277.87 P
0.29 (ified in the) 81 265.68 P
3 9 Q
0.63 (COMMIT) 127.7 265.68 P
2 10 Q
0.29 ( request before reporting suc-) 160.1 265.68 P
(cess.) 81 253.48 T
0.34 (Other conditions arise in which the write verifier) 90.36 231.48 P
-0.15 (must change. For example, the server must change the) 72 219.29 P
0.64 (write verifier on failover if NFS Version 3 forms the) 72 207.09 P
-0.33 (basis of a non-shared memory, highly available imple-) 72 194.9 P
2.87 (mentation of NFS) 72 182.7 P
1 F
2.87 ([Bhide91]) 154.78 182.7 P
2 F
2.87 (. The unsynchronized) 195.89 182.7 P
-0.32 (data is not available to the backup processor, and there) 72 170.51 P
0.09 (is no guarantee that the primary processor was able to) 72 158.31 P
0.11 (flush uncommitted data to stable storage before going) 72 146.11 P
(down.) 72 133.92 T
-0.43 (If a server is shut down cleanly, it could be advan-) 90.36 111.92 P
0.95 (tageous to save the write verifier for reuse when the) 72 99.72 P
0.51 (server is brought back on line. This avoids triggering) 72 87.53 P
(client rewrites of already committed data.) 72 75.33 T
324 72 540 479.9 R
7 X
V
0 F
0 X
(4.3.2.3) 324 473.24 T
(Data sharing) 369 473.24 T
2 F
0.73 (Asynchronous writes make write sharing without us-) 324 454.76 P
1.04 (ing a higher-level application synchronization proto-) 324 442.76 P
-0.07 (col even less attractive than with NFS Version 2. NFS) 324 430.76 P
0.6 (Version 3 clients preserve close-to-open consistency:) 324 418.76 P
1.32 (clients typically block on a) 324 406.76 P
1 F
1.32 (close\0502\051) 440.85 406.76 P
2 F
1.32 ( until all data is) 473.06 406.76 P
0.43 (flushed to server stable storage and revalidate cached) 324 394.76 P
-0.46 (data with an attribute check on) 324 382.76 P
1 F
-0.46 (open\0502\051) 446.77 382.76 P
2 F
-0.46 (. Strictly speak-) 477.87 382.76 P
0.03 (ing, close-to-open consistency is only an implementa-) 324 370.76 P
6.14 (tion practice. Data sharing semantics of NFS) 324 358.76 P
1.41 (Version) 324 346.76 P
1.41 (3 differ from those of NFS Version 2 if an) 358.16 346.76 P
0.34 (NFS Version 3 server reboots and loses uncommitted) 324 334.76 P
1.1 (data. Because write sharing between NFS Version 2) 324 322.76 P
0.03 (clients was never supported in the absence of locking,) 324 310.76 P
0.58 (changes in essentially undefined behavior is not con-) 324 298.76 P
(sidered a major issue.) 324 286.76 T
0 F
(4.3.3) 324 266.29 T
5 F
(READDIRPLUS) 355.17 266.29 T
2 F
3.92 (NFS Version 3 contains a new operation called) 324 247.81 P
3 9 Q
6.49 (READDIRPLUS) 324 235.81 P
2 10 Q
3 (, which returns file handles and at-) 383.4 235.81 P
1.93 (tributes in addition to the directory information re-) 324 223.81 P
(turned by) 324 211.81 T
3 9 Q
(READDIR) 364.55 211.81 T
2 10 Q
(.) 402.35 211.81 T
3 9 Q
10.76 (READDIRPLUS) 342.36 195.33 P
2 10 Q
4.98 ( exploits observed request se-) 401.76 195.33 P
0.58 (quences generated by NFS Version 2 clients. For ex-) 324 183.33 P
2.49 (ample, when a UNIX user types \322) 324 171.33 P
5 9 Q
5.38 (ls) 474.19 171.33 P
5.38 (-F) 490.39 171.33 P
5.38 (dir) 506.59 171.33 P
2 10 Q
2.49 (\323 to) 522.79 171.33 P
0.2 (browse a directory containing 20 entries, the) 324 159.33 P
5 9 Q
0.44 (ls) 505.95 159.33 P
2 10 Q
0.2 ( com-) 516.75 159.33 P
-0.53 (mand opens the target directory, reads it, and then calls) 324 147.33 P
1 F
-0.41 (stat\0502\051) 324 135.33 P
2 F
-0.41 ( 20 times. In NFS Version 2, a) 350.11 135.33 P
3 9 Q
-0.89 (READDIR) 471.23 135.33 P
2 10 Q
-0.41 ( request) 509.03 135.33 P
0.4 (would be followed by 20 sequential) 324 123.33 P
3 9 Q
0.86 (LOOKUP) 471.93 123.33 P
2 10 Q
0.4 ( requests) 504.33 123.33 P
1 (to retrieve attributes \050and file handles\051. In NFS Ver-) 324 111.33 P
0.44 (sion 3, a single) 324 99.33 P
3 9 Q
0.96 (READDIRPLUS) 388.28 99.33 P
2 10 Q
0.44 ( retrieves the name list) 447.68 99.33 P
-0.17 (and attributes for the 20 entries, significantly reducing) 324 87.33 P
(the command execution time.) 324 75.33 T
73.33 488.05 539.17 488.05 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
3.21 (There are some drawbacks to) 90.36 713.33 P
3 9 Q
6.94 (READDIRPLUS) 226.1 713.33 P
2 10 Q
3.21 (,) 285.5 713.33 P
0.87 (however. A) 72 701.33 P
3 9 Q
1.88 (READDIRPLUS) 122.89 701.33 P
2 10 Q
0.87 ( is more expensive than a) 182.29 701.33 P
-0.58 (corresponding) 72 689.33 P
3 9 Q
-1.25 (READDIR) 131.13 689.33 P
2 10 Q
-0.58 (. Results from an implementa-) 168.93 689.33 P
-0.51 (tion that generates exclusively) 72 677.33 P
3 9 Q
-1.1 (READDIRPLUS) 193.84 677.33 P
2 10 Q
-0.51 ( requests) 253.24 677.33 P
-0.21 (show a performance drop because attributes for all en-) 72 665.33 P
-0.16 (tries in a directory are fetched repeatedly for every ac-) 72 653.33 P
(cess to a directory.) 72 641.33 T
0.35 (The) 90.36 623.33 P
3 9 Q
0.76 (READDIRPLUS) 108.76 623.33 P
2 10 Q
0.35 ( operation can be viewed as a) 168.16 623.33 P
0.33 (way to get the contents of a directory and to populate) 72 611.33 P
0.09 (name and attribute caches for the entries in that direc-) 72 599.33 P
1.34 (tory at the same time. The) 72 587.33 P
3 9 Q
2.9 (READDIRPLUS) 186.99 587.33 P
2 10 Q
1.34 ( operation) 246.39 587.33 P
0.58 (should be used only when reading a directory for the) 72 575.33 P
0.69 (first time or when rereading a directory whose cache) 72 563.33 P
0.19 (entry was invalidated because the directory was mod-) 72 551.33 P
1.07 (ified. A) 72 539.33 P
3 9 Q
2.31 (READDIRPLUS) 107.19 539.33 P
2 10 Q
1.07 ( should not be issued when a) 166.59 539.33 P
0.98 (valid cache entry for a directory exists, because it is) 72 527.33 P
0.19 (likely that a) 72 515.33 P
3 9 Q
0.42 (READDIRPLUS) 122.3 515.33 P
2 10 Q
0.19 ( operation was recently is-) 181.7 515.33 P
0.06 (sued to populate the various caches with directory en-) 72 503.33 P
(try attributes and file handles.) 72 491.33 T
0 F
(4.3.4) 72 469.32 T
5 F
(NFS3ERR_JUKEBOX) 103.17 469.32 T
3 9 Q
-0.57 (NFS3ERR_JUKEBOX) 72 449.32 P
2 8 Q
-0.21 (2) 153 453.32 P
2 10 Q
-0.26 (lets servers inform clients that a) 161.83 449.32 P
2.21 (file is temporarily inaccessible \050archived offline or) 72 437.32 P
0.27 (locked against modification for backup\051 and that they) 72 425.32 P
-0.19 (should retry the request later. It is intended to improve) 72 413.32 P
0.9 (the behavior of NFS in hierarchical storage manage-) 72 401.32 P
(ment applications.) 72 389.32 T
0.18 (In NFS Version 2, a server performs one of three) 90.36 369.31 P
1 (actions if a file is temporarily inaccessible. The first) 72 357.31 P
1.04 (action is to drop the request, which forces the client) 72 345.31 P
0.59 (into normal back-off and retransmission. The request) 72 333.31 P
-0.11 (will be satisfied at some later time on a retry. The sec-) 72 321.31 P
0.16 (ond action is to have the server block a service thread) 72 309.31 P
-0.39 (until the file again becomes accessible. The second ac-) 72 297.31 P
0.91 (tion is often implemented inadvertently; because cli-) 72 285.31 P
-0.45 (ents employ mechanisms like biods to gain parallelism) 72 273.31 P
2.73 (and will emit several related requests to one file,) 72 261.31 P
0.1 (blocking server threads can hang the server. The third) 72 249.31 P
0.08 (action is to return some error to the client, thus reject-) 72 237.31 P
(ing the request.) 72 225.31 T
10.2 (An NFS Version 3 server) 90.36 207.31 P
10.2 (returns) 260.23 207.31 P
3 9 Q
2.61 (NFS3ERR_JUKEBOX) 72 195.31 P
2 10 Q
1.21 ( when a file is temporarily inac-) 153 195.31 P
0.86 (cessible. The client operating system does not return) 72 183.31 P
0.02 (the error to the application but handles it internally by) 72 171.31 P
1.15 (aggressively delaying reissue of the request, thereby) 72 159.31 P
-0.56 (reducing server load due to request retransmission. Af-) 72 147.31 P
0.46 (ter a tunable delay, the request is reissued. The client) 72 135.31 P
0 0 0 1 0 0 0 K
72 117 288 131.98 C
0 0 0 1 0 0 0 K
81 129.96 225 129.96 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
2 6.4 Q
0 X
0 0 0 1 0 0 0 K
0 (2) 72 114.87 P
2 8 Q
0 (The term \322) 76.8 111.67 P
3 F
0.01 (JUKEBOX) 111.47 111.67 P
2 F
0 (\323 is a long standing joke in the NFS commu-) 145.07 111.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.48 (nity. We kept the historical error name even though it incorrectly im-) 72 102.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.38 (plies a binding to a particular HSM mechanism. Given the generic) 72 93.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.51 (intent of the error,) 72 84.67 P
3 F
3.62 (NFS3ERR_TMP_INACCESSIBLE) 138.24 84.67 P
2 F
1.51 ( would be) 253.43 84.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(more appropriate.) 72 75.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
1.19 (should reissue the request with another transmission) 324 713.33 P
(id.) 324 701.33 T
0 F
(4.3.5) 324 681.33 T
(Weak cache consistency) 355.17 681.33 T
2 F
0.62 (Many NFS Version 2 clients cache file and directory) 324 663.33 P
1.15 (data to improve performance. To determine whether) 324 651.33 P
-0.29 (cached data is valid, a client sends a) 324 639.33 P
3 9 Q
-0.62 (GETATTR) 468.61 639.33 P
2 10 Q
-0.29 ( request.) 506.41 639.33 P
0.34 (If the new modification time from the server matches) 324 627.33 P
0.07 (the modification time in the client\325s cached attributes,) 324 615.33 P
0.79 (then the client assumes its cache is up-to-date. If the) 324 603.33 P
2.21 (modification times don\325t match, then the file must) 324 591.33 P
(have changed, and the client invalidates its cache.) 324 579.33 T
0.58 (This method fails when the client itself modifies) 342.36 561.33 P
-0.23 (the file being cached. For example, if a client writes to) 324 549.33 P
0.1 (one part of a file, cached data for other parts is proba-) 324 537.33 P
0.44 (bly still valid. But it is impossible for the client to be) 324 525.33 P
0.18 (sure, because the client\325s own) 324 513.33 P
3 9 Q
0.39 (WRITE) 447.1 513.33 P
2 10 Q
0.18 ( request updated) 474.1 513.33 P
1.34 (the file\325s modification time. A reckless client might) 324 501.33 P
0.61 (keep the cache data \050which is dangerous\051, and a cau-) 324 489.33 P
-0.32 (tious client might invalidate the cache \050which is slow\051.) 324 477.33 P
0.82 (Weak cache consistency offers an alternative by) 342.36 459.33 P
0.03 (helping clients determine more accurately when to in-) 324 447.33 P
-0.31 (validate their cache. The reply for each NFS Version 3) 324 435.33 P
0.34 (request that can modify data includes two versions of) 324 423.33 P
0.54 (the file\325s attributes: pre-operation attributes from just) 324 411.33 P
-0.44 (before the server performed the operation and post-op-) 324 399.33 P
0.93 (eration attributes from just after the operation. If the) 324 387.33 P
0.26 (modification time in the pre-operation attributes from) 324 375.33 P
0.31 (the server matches the cached attributes on the client,) 324 363.33 P
0.55 (then the client\325s cache is valid. The client should up-) 324 351.33 P
-0.15 (date its attribute cache with the new post-operation at-) 324 339.33 P
(tributes.) 324 327.33 T
2.12 (Weak cache consistency does not provide true) 342.36 311.33 P
0.3 (consistency such as found in Sprite) 324 299.33 P
1 F
0.3 ([Nelson88]) 469.14 299.33 P
2 F
0.3 (. With) 514.7 299.33 P
-0.33 (weak cache consistency, clients might see an inconsis-) 324 287.33 P
-0.35 (tent view of server data. For example, one client might) 324 275.33 P
-0.51 (have modified a file locally but not yet flushed the new) 324 263.33 P
0.62 (data to the server. Even if it has, a second client will) 324 251.33 P
2.42 (only verify modification times when a file is first) 324 239.33 P
-0.48 (opened or when the cached attributes time out. As a re-) 324 227.33 P
(sult, a second client\325s cache may be out of date.) 324 215.33 T
-0.45 (Some servers may be unable to generate pre-oper-) 342.36 197.33 P
1.13 (ation attributes, so clients should be prepared to fall) 324 185.33 P
1.35 (back to NFS Version 2 behavior. Since weak cache) 324 173.33 P
1.02 (consistency is just a hint, client implementations are) 324 161.33 P
(free to use it or ignore it.) 324 149.33 T
0 F
(4.3.6) 324 129.33 T
(Other issues) 355.17 129.33 T
2 F
0.08 (Two changes in NFS Version 3 impose extra work on) 324 111.33 P
0.21 (the client. For many NFS Version 3 requests, it is op-) 324 99.33 P
1.3 (tional to return file handle and attribute information) 324 87.33 P
0.64 (that is mandatory in NFS Version 2. For example, in) 324 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
1.35 (NFS Version) 72 713.33 P
1.35 (2, the) 128.35 713.33 P
3 9 Q
2.92 (CREATE) 155.77 713.33 P
2 10 Q
1.35 ( request must return the) 188.17 713.33 P
-0.44 (file handle and attributes for the newly created file, but) 72 701.33 P
0.13 (in NFS Version 3, their return is optional. As a result,) 72 689.33 P
0.82 (an NFS Version 3 client must be prepared to issue a) 72 677.33 P
3 9 Q
-0.77 (LOOKUP) 72 665.33 P
2 10 Q
-0.35 ( after each) 104.4 665.33 P
3 9 Q
-0.77 (CREATE) 147.48 665.33 P
2 10 Q
-0.35 (, in case the server does not) 179.88 665.33 P
0.95 (return a file handle for the new file. Furthermore, in) 72 653.33 P
0.22 (NFS Version 3, it is optional for) 72 641.33 P
3 9 Q
0.48 (LOOKUP) 205.22 641.33 P
2 10 Q
0.22 ( to return at-) 237.62 641.33 P
0.3 (tributes, so the client must also be prepared to issue a) 72 629.33 P
3 9 Q
(GETATTR) 72 617.33 T
2 10 Q
(.) 109.8 617.33 T
-0.6 (NFS Version 2 servers are required to accept all or) 90.36 601.33 P
-0.42 (none of the data in a) 72 589.33 P
3 9 Q
-0.9 (WRITE) 153.37 589.33 P
2 10 Q
-0.42 ( request. In NFS Version 3,) 180.37 589.33 P
0.8 (a server can accept only some of the data in a write,) 72 577.33 P
1.49 (and the client is expected to send the rest a second) 72 565.33 P
-0.56 (time. For example, a client might send an 8192 byte re-) 72 553.33 P
-0.12 (quest, but a server might choose to accept only 1 byte.) 72 541.33 P
1.93 (The client must be prepared to send the remaining) 72 529.33 P
0.15 (8191 bytes a second time, and again, the server might) 72 517.33 P
(choose not to accept the entire request.) 72 505.33 T
2.04 (In practice, these features are unlikely to be a) 90.36 489.33 P
-0.11 (problem because most server implementations will al-) 72 477.33 P
-0.13 (ways return optional information and accept the entire) 72 465.33 P
(contents of) 72 453.33 T
3 9 Q
(WRITE) 118.66 453.33 T
2 10 Q
( requests.) 145.66 453.33 T
0 12 Q
(4.4.) 72 432 T
(Changes to related protocols) 103.5 432 T
2 10 Q
-0.01 (NFS Version 3 continues the philosophy of building a) 72 413.33 P
0.75 (network file service from a collection of cooperating) 72 401.33 P
1.33 (protocols. The mount protocol \050MOUNT\051 allows an) 72 389.33 P
-0.28 (NFS client to gain access to an exported directory on a) 72 377.33 P
-0.25 (server, and the network lock manager protocol \050NLM\051) 72 365.33 P
(supports remote file locking for NFS.) 72 353.33 T
0.82 (Changes to the file handle and file size fields in) 90.36 337.33 P
2.58 (NFS Version 3 required corresponding changes in) 72 325.33 P
-0.25 (MOUNT and NLM, so new versions of both protocols) 72 313.33 P
1.34 (have been released. The new MOUNT specification) 72 301.33 P
-0.29 (allows a successful mount to return a list of acceptable) 72 289.33 P
-0.29 (RPC authentication flavors \050such as DES or Kerberos\051) 72 277.33 P
1.41 (for the client to use. Automounter facilities can use) 72 265.33 P
0.59 (this information to correctly access servers which re-) 72 253.33 P
4.3 (quire certain flavors of authentication. The new) 72 241.33 P
-0.15 (MOUNT protocol is also slightly cleaner than the pre-) 72 229.33 P
0.62 (vious one. For example, legal error values have been) 72 217.33 P
0.03 (enumerated instead of allowing any UNIX error num-) 72 205.33 P
(ber.) 72 193.33 T
0 12 Q
(5.) 72 170 T
(Performance) 90 170 T
2 10 Q
-0.45 (A major goal of NFS Version 3 was to improve perfor-) 72 151.33 P
1.82 (mance, especially in write throughput. Performance) 72 139.33 P
(was improved by the following:) 72 127.33 T
(\245) 72 111.33 T
(Providing reliable asynchronous writes) 81 111.33 T
(\245) 72 99.33 T
0.48 (Removing the 8KB data size limitation for) 81 99.33 P
3 9 Q
1.03 (READ) 257.4 99.33 P
2 10 Q
(and) 81 87.33 T
3 9 Q
(WRITE) 97.94 87.33 T
2 10 Q
( requests) 124.94 87.33 T
(\245) 72 75.33 T
-0.11 (Providing a) 81 75.33 P
3 9 Q
-0.23 (READDIRPLUS) 129.67 75.33 P
2 10 Q
-0.11 ( procedure that returns) 189.07 75.33 P
(file handles and attributes with directory names) 333 713.33 T
(\245) 324 700.96 T
(Returning attribute information in all replies) 333 700.96 T
(\245) 324 688.58 T
-0.08 (Providing weak cache consistency data to allow a) 333 688.58 P
(client to more effectively manage its caches) 333 676.58 T
0 12 Q
(5.1.) 324 654.88 T
(Test setup) 355.5 654.88 T
2 10 Q
-0.29 (We measured Digital\325s OSF/1 implementation of NFS) 324 635.83 P
0.42 (Versions 2 and 3. The local file system employed for) 324 623.83 P
-0.1 (these tests was the Berkeley Fast File System with en-) 324 611.83 P
2.04 (hanced clustering) 324 599.83 P
1 F
2.04 ([McVoy91]) 400.85 599.83 P
2 F
2.04 (. Except where noted,) 446.95 599.83 P
0.82 (the following configuration was used to generate the) 324 587.83 P
(performance results:) 324 575.83 T
(\245) 324 559.46 T
-0.23 (Two Digital Model 3000/600 96MB workstations) 333 559.46 P
(\245) 324 547.08 T
(Private FDDI network) 333 547.08 T
(\245) 324 534.71 T
0.16 (Server running 16 nfsds \050multiple threads of exe-) 333 534.71 P
-0.35 (cution used on an NFS server to gain parallelism\051.) 333 522.71 P
(\245) 324 510.33 T
3.88 (Client running 7 nfsiods \050or biods\321multiple) 333 510.33 P
-0.44 (threads of execution used on an NFS client to gain) 333 498.33 P
(parallelism\051) 333 486.33 T
(\245) 324 473.96 T
2.22 (With and without Prestoserve on server, using) 333 473.96 P
(1MB NVRAM) 333 461.96 T
(\245) 324 449.58 T
(With and without write gathering on server) 333 449.58 T
(\245) 324 437.21 T
-0.44 (Server configured with one 1GB RZ26 SCSI disk,) 333 437.21 P
(2.3 MB/sec raw transfer rate.) 333 425.21 T
1.19 (The tests ran with NFS running on top of UDP) 342.36 408.83 P
2.32 (with a maximum transfer size of 8KB. The larger) 324 396.83 P
-0.53 (transfer sizes permitted by NFS Version 3 were not ex-) 324 384.83 P
0.94 (ploited. Measurements at SunSoft on a system using) 324 372.83 P
-0.05 (larger than 8KB transfer sizes showed improved write) 324 360.83 P
0.59 (throughput, presumably from the reduced file system) 324 348.83 P
1.38 (overhead resulting from fewer separate I/O requests) 324 336.83 P
(and fewer RPC messages over-the-wire.) 324 324.83 T
0 12 Q
(5.2.) 324 303.12 T
(Sequential write throughput) 355.5 303.12 T
2 10 Q
-0.18 (Figure 2 shows the results of writing a 10MB file over) 324 284.08 P
-0.47 (a private FDDI network using NFS Version 2 and NFS) 324 272.08 P
0.19 (Version 3 protocols and varying the server configura-) 324 260.08 P
2.82 (tion to enable/disable Prestoserve acceleration and) 324 248.08 P
6.24 (server write gathering. We consider the NFS) 324 236.08 P
-0.24 (Version) 324 224.08 P
-0.24 (2, no write gathering, no Prestoserve configu-) 358.16 224.08 P
0.82 (ration to be the average NFS write throughput avail-) 324 212.08 P
0.45 (able today. We believe that the NFS Version 2, write) 324 200.08 P
-0.37 (gathering, Prestoserve configuration provides compet-) 324 188.08 P
-0.49 (itive NFS write throughput. We observe the following:) 324 176.08 P
(\245) 324 159.71 T
5.22 (NFS Version 2 with Prestoserve and NFS) 333 159.71 P
0.55 (Version) 333 147.71 P
0.55 (3 delivers the maximum raw device rate) 367.16 147.71 P
(to the remote client.) 333 135.71 T
(\245) 324 123.33 T
3.93 (NFS Version 3 with asynchronous writes at) 333 123.33 P
0.18 (2323) 333 111.33 P
0.18 (KB/s delivers only 1% less throughput than) 355.5 111.33 P
-0.24 (NFS Version 2 with Prestoserve and write gather-) 333 99.33 P
-0.34 (ing at 2346 KB/s, but it consumes 36% less server) 333 87.33 P
(CPU.) 333 75.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
124 70.86 476.17 282.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
124 70.86 476.17 282.33 R
7 X
0 0 0 1 0 0 0 K
V
180.38 90.12 438.07 90.12 2 L
0.5 H
1 Z
0 X
N
0 0 0 1 0 0 0 K
6 7 Q
(V2, no WG,) 186.3 82.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V2, WG,) 232.71 82.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V2, no WG,) 269.39 82.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V2, WG,) 316.84 82.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V3,) 366.36 82.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V3,) 406.93 82.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 8 Q
(Throughput KB/s) 0 -270 142.58 146.79 TF
0 0 0 1 0 0 0 K
438.07 90.12 438.07 263.57 2 L
N
438.07 90.12 436.48 90.12 2 L
N
438.07 98.83 436.48 98.83 2 L
N
438.07 107.47 436.48 107.47 2 L
N
438.07 116.18 436.48 116.18 2 L
N
438.07 124.83 436.48 124.83 2 L
N
438.07 133.47 436.48 133.47 2 L
N
438.07 142.18 436.48 142.18 2 L
N
438.07 150.82 436.48 150.82 2 L
N
438.07 159.53 436.48 159.53 2 L
N
438.07 168.17 436.48 168.17 2 L
N
438.07 176.88 436.48 176.88 2 L
N
438.07 185.52 436.48 185.52 2 L
N
438.07 194.16 436.48 194.16 2 L
N
438.07 202.87 436.48 202.87 2 L
N
438.07 211.51 436.48 211.51 2 L
N
438.07 220.22 436.48 220.22 2 L
N
438.07 228.86 436.48 228.86 2 L
N
438.07 237.58 436.48 237.58 2 L
N
438.07 246.22 436.48 246.22 2 L
N
438.07 254.93 436.48 254.93 2 L
N
438.07 263.57 436.48 263.57 2 L
N
438.07 90.12 434.9 90.12 2 L
N
438.07 107.47 434.9 107.47 2 L
N
438.07 124.83 434.9 124.83 2 L
N
438.07 142.18 434.9 142.18 2 L
N
438.07 159.53 434.9 159.53 2 L
N
438.07 176.88 434.9 176.88 2 L
N
438.07 194.16 434.9 194.16 2 L
N
438.07 211.51 434.9 211.51 2 L
N
438.07 228.86 434.9 228.86 2 L
N
438.07 246.22 434.9 246.22 2 L
N
0 0 0 1 0 0 0 K
6 7 Q
(0) 442.89 87.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 442.89 105.14 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 442.89 122.49 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 442.89 139.84 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 442.89 157.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 442.89 174.55 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 442.89 191.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 442.89 209.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 442.89 226.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(90) 442.89 243.88 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100) 442.89 261.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 8 Q
(CPU % Utilization) 0 -90 461.76 208.37 TF
0 0 0 1 0 0 0 K
438.07 263.57 434.9 263.57 2 L
N
232.22 90.12 232.22 146.21 242.01 146.21 242.01 90.12 232.22 90.12 5 Y
2 X
V
0 H
0 Z
0 X
N
273.76 90.12 273.76 212.23 283.55 212.23 283.55 90.12 273.76 90.12 5 Y
2 X
V
0 X
N
315.31 90.12 315.31 214.54 325.1 214.54 325.1 90.12 315.31 90.12 5 Y
2 X
V
0 X
N
398.47 90.12 398.47 249.31 408.26 249.31 408.26 90.12 398.47 90.12 5 Y
2 X
V
0 X
N
190.6 90.12 190.6 100.13 200.47 100.13 200.47 90.12 190.6 90.12 5 L
2 X
V
0.5 H
1 Z
0 X
N
356.85 90.12 356.85 241.39 366.71 241.39 366.71 90.12 356.85 90.12 5 L
2 X
V
0 X
N
200.47 90.12 200.47 109.2 210.26 109.2 210.26 90.12 200.47 90.12 5 Y
7 X
V
0 H
0 Z
1 X
N
242.01 90.12 242.01 143.91 251.8 143.91 251.8 90.12 242.01 90.12 5 Y
7 X
V
1 X
N
283.55 90.12 283.55 249.67 293.35 249.67 293.35 90.12 283.55 90.12 5 Y
14 X
V
1 X
N
325.1 90.12 325.1 241.03 334.96 241.03 334.96 90.12 325.1 90.12 5 Y
7 X
V
1 X
N
366.71 90.12 366.71 247.95 376.51 247.95 376.51 90.12 366.71 90.12 5 Y
7 X
V
1 X
N
408.26 90.12 408.26 246.22 418.05 246.22 418.05 90.12 408.26 90.12 5 Y
14 X
V
1 X
N
200.47 90.12 200.47 109.2 210.26 109.2 210.26 90.12 200.47 90.12 5 L
7 X
V
0.5 H
1 Z
0 X
N
242.01 90.12 242.01 143.91 251.8 143.91 251.8 90.12 242.01 90.12 5 L
7 X
V
0 X
N
283.55 90.12 283.55 249.67 293.35 249.67 293.35 90.12 283.55 90.12 5 L
7 X
V
0 X
N
325.1 90.12 325.1 241.03 334.96 241.03 334.96 90.12 325.1 90.12 5 L
7 X
V
0 X
N
366.71 90.12 366.71 247.95 376.51 247.95 376.51 90.12 366.71 90.12 5 L
7 X
V
0 X
N
408.26 90.12 408.26 246.22 418.05 246.22 418.05 90.12 408.26 90.12 5 L
7 X
V
0 X
N
210.26 90.12 210.26 105.74 220.05 105.74 220.05 90.12 210.26 90.12 5 Y
10 X
V
0 H
0 Z
1 X
N
251.8 90.12 251.8 138.72 261.67 138.72 261.67 90.12 251.8 90.12 5 Y
10 X
V
1 X
N
293.35 90.12 293.35 180.34 303.21 180.34 303.21 90.12 293.35 90.12 5 Y
10 X
V
1 X
N
334.96 90.12 334.96 183.79 344.76 183.79 344.76 90.12 334.96 90.12 5 Y
10 X
V
1 X
N
376.51 90.12 376.51 199.42 386.3 199.42 386.3 90.12 376.51 90.12 5 Y
10 X
V
1 X
N
418.05 90.12 418.05 199.42 427.92 199.42 427.92 90.12 418.05 90.12 5 Y
10 X
V
1 X
N
210.26 90.12 210.26 105.74 220.05 105.74 220.05 90.12 210.26 90.12 5 L
13 X
V
0.5 H
1 Z
0 X
N
251.8 90.12 251.8 138.72 261.67 138.72 261.67 90.12 251.8 90.12 5 L
13 X
V
0 X
N
293.35 90.12 293.35 180.34 303.21 180.34 303.21 90.12 293.35 90.12 5 L
13 X
V
0 X
N
334.96 90.12 334.96 183.79 344.76 183.79 344.76 90.12 334.96 90.12 5 L
13 X
V
0 X
N
376.51 90.12 376.51 199.42 386.3 199.42 386.3 90.12 376.51 90.12 5 L
13 X
V
0 X
N
418.05 90.12 418.05 199.42 427.92 199.42 427.92 90.12 418.05 90.12 5 L
13 X
V
0 X
N
187.09 242.34 203.51 242.34 203.51 250.98 187.09 250.98 4 Y
2 X
V
0 H
0 Z
1 X
N
0 0 0 1 0 0 0 K
6 7 Q
0 X
( Write throughput) 207.61 244.33 T
0 0 0 1 0 0 0 K
187.09 242.34 203.51 242.34 203.51 250.98 187.09 250.98 187.09 242.34 5 L
0.5 H
1 Z
N
187.09 229.39 203.51 229.39 203.51 238.03 187.09 238.03 4 Y
7 X
V
0 H
0 Z
1 X
N
0 0 0 1 0 0 0 K
0 X
( Server CPU utilization) 207.61 231.37 T
0 0 0 1 0 0 0 K
187.09 229.39 203.51 229.39 203.51 238.03 187.09 238.03 187.09 229.39 5 L
7 X
V
0.5 H
1 Z
0 X
N
187.09 216.42 203.51 216.42 203.51 225.07 187.09 225.07 4 Y
10 X
V
0 H
0 Z
1 X
N
0 0 0 1 0 0 0 K
0 X
( Client CPU utilization) 207.61 218.41 T
0 0 0 1 0 0 0 K
187.09 216.42 203.51 216.42 203.51 225.07 187.09 225.07 187.09 216.42 5 L
13 X
V
0.5 H
1 Z
0 X
N
0 0 0 1 0 0 0 K
(WG = write gathering) 188.2 202.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V2 = Version 2) 188.2 192.07 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V3 = Version 3) 188.2 182.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(Figure 3.) 134.56 271.97 T
(Comparisons of 40MB file write over FDDI, Digital OSF/1, Digital 3000/600) 167.23 271.97 T
0 0 0 1 0 0 0 K
6 7 Q
(no Presto) 190.38 75.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Presto) 278.34 75.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( no Presto) 355.66 75.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(no Presto) 231.93 75.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Presto) 319.95 75.26 T
0 0 0 1 0 0 0 K
179.2 90.04 179.2 263.49 2 L
N
179.2 90.04 181 90.04 2 L
N
179.2 103.43 181 103.43 2 L
N
179.2 116.75 181 116.75 2 L
N
179.2 130.07 181 130.07 2 L
N
179.2 143.39 181 143.39 2 L
N
179.2 156.79 181 156.79 2 L
N
179.2 170.11 181 170.11 2 L
N
179.2 183.43 181 183.43 2 L
N
179.2 196.82 181 196.82 2 L
N
179.2 210.14 181 210.14 2 L
N
179.2 223.46 181 223.46 2 L
N
179.2 236.78 181 236.78 2 L
N
179.2 250.17 181 250.17 2 L
N
179.56 263.37 181.36 263.37 2 L
N
179.2 90.04 181.72 90.04 2 L
N
179.2 116.75 181.72 116.75 2 L
N
179.2 143.39 181.72 143.39 2 L
N
179.2 170.11 181.72 170.11 2 L
N
179.2 196.82 181.72 196.82 2 L
N
179.2 223.46 181.72 223.46 2 L
N
0 0 0 1 0 0 0 K
(0) 170.48 87.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1000) 158.81 114.42 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2000) 158.81 141.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3000) 158.81 167.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4000) 158.81 194.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5000) 158.81 221.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6000) 158.81 247.84 T
0 0 0 1 0 0 0 K
179.2 250.17 181.72 250.17 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Presto) 403.04 75.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(404 KB/s) 192.36 115.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2263 KB/s) 231.53 152.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4929 KB/s) 275.7 254.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5022 KB/s) 316.53 245.77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6105 KB/s) 357.36 252.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6425 KB/s) 398.2 255.1 T
0 0 0 1 0 0 0 K
0 0 612 792 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(\245) 72 491.67 T
-0.16 (At 2323 KB/s, NFS Version 3 is seven times fast-) 81 491.67 P
0.69 (er than NFS Version 2 at 320 KB/s for a typical) 81 479.38 P
3.1 (configuration with no write gathering and no) 81 467.1 P
(Prestoserve.) 81 454.81 T
0.02 (The NFS Version 3 client emitted only asynchro-) 90.36 432.81 P
-0.04 (nous writes in these tests; therefore, server write gath-) 72 420.52 P
0.75 (ering had no effect. This configuration is not shown.) 72 408.24 P
2.3 (Prestoserve further improves NFS Version 3 asyn-) 72 395.95 P
0.51 (chronous writes because there is a synchronous com-) 72 383.67 P
1.69 (ponent to writing metadata during local file system) 72 371.38 P
0.96 (clustering. NFS Version 2 with Prestoserve provides) 72 359.1 P
1.03 (higher throughput on a single disk system than NFS) 72 346.81 P
0.79 (Version 3, because Prestoserve masks the cost of re-) 72 334.52 P
0.43 (duced cluster transfer sizes and missed rotations seen) 72 322.24 P
0.58 (in its absence. Multiple spindles can help mask these) 72 309.95 P
(effects in the absence of accelerator hardware.) 72 297.67 T
-0.56 (It was clear that the disk was the bottleneck for the) 342.36 491.67 P
0.9 (above test, given the low CPU utilizations, available) 324 479.67 P
-0.53 (network bandwidth on FDDI \050100 Mbit/s\051, and the raw) 324 467.67 P
0.58 (speed of the disk. To remove the disk bottleneck, we) 324 455.67 P
2.66 (made a second set of runs, sequentially writing a) 324 443.67 P
(40MB file, with the following configuration changes:) 324 431.67 T
(\245) 324 413.67 T
2.72 (Server configured with four 2GB RZ28 SCSI) 333 413.67 P
-0.59 (disks, each 4.8 MB/sec raw transfer rate, four-way) 333 401.67 P
(striped) 333 389.67 T
(\245) 324 375.67 T
(Client running 15 nfsiods \050or biods\051) 333 375.67 T
0.47 (The results in Figure 3 show that for sufficiently) 342.36 357.67 P
-0.01 (large files on a non-disk bound server, NFS Version 3) 324 345.67 P
0.51 (delivered 6105 KB/s, compared to an NFS Version 2) 324 333.67 P
-0.13 (server with Prestoserve and write gathering that deliv-) 324 321.67 P
0.58 (ered 5022 KB/s. NFS Version 3 delivered 22% more) 324 309.67 P
1.81 (throughput at a similar server CPU utilization. The) 324 297.67 P
73.08 504.6 538.92 504.6 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
73.08 287.5 538.92 287.5 2 L
N
108.17 507 503.17 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108.17 507 503.17 720 R
7 X
0 0 0 1 0 0 0 K
V
179.63 542.27 437.32 542.27 2 L
0.5 H
1 Z
0 X
N
179.63 542.27 179.63 715.71 2 L
N
0 0 0 1 0 0 0 K
6 7 Q
(V2, no WG,) 186.52 533.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V2, WG,) 232.93 533.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V2, no WG) 270.58 533.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V2, WG,) 316.09 533.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V3,) 365.61 533.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V3,) 406.18 533.67 T
0 0 0 1 0 0 0 K
179.63 555.66 181.43 555.66 2 L
N
179.63 568.98 181.43 568.98 2 L
N
179.63 582.3 181.43 582.3 2 L
N
179.63 595.62 181.43 595.62 2 L
N
179.63 609.01 181.43 609.01 2 L
N
179.63 622.33 181.43 622.33 2 L
N
179.63 635.65 181.43 635.65 2 L
N
179.63 649.04 181.43 649.04 2 L
N
179.63 662.36 181.43 662.36 2 L
N
179.63 675.68 181.43 675.68 2 L
N
179.63 689 181.43 689 2 L
N
179.63 702.39 181.43 702.39 2 L
N
179.63 715.71 181.43 715.71 2 L
N
179.63 568.98 182.15 568.98 2 L
N
179.63 595.62 182.15 595.62 2 L
N
179.63 622.33 182.15 622.33 2 L
N
179.63 649.04 182.15 649.04 2 L
N
179.63 675.68 182.15 675.68 2 L
N
0 0 0 1 0 0 0 K
(0) 170.91 539.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1000) 159.24 566.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2000) 159.24 593.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3000) 159.24 620 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4000) 159.24 646.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5000) 159.24 673.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6000) 159.24 700.06 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 8 Q
(Throughput KB/s) 0 -270 150.33 598.94 TF
0 0 0 1 0 0 0 K
179.63 702.39 182.15 702.39 2 L
N
437.32 542.27 437.32 715.71 2 L
N
437.32 542.27 435.73 542.27 2 L
N
437.32 550.98 435.73 550.98 2 L
N
437.32 559.62 435.73 559.62 2 L
N
437.32 568.33 435.73 568.33 2 L
N
437.32 576.97 435.73 576.97 2 L
N
437.32 585.61 435.73 585.61 2 L
N
437.32 594.32 435.73 594.32 2 L
N
437.32 602.96 435.73 602.96 2 L
N
437.32 611.67 435.73 611.67 2 L
N
437.32 620.31 435.73 620.31 2 L
N
437.32 629.03 435.73 629.03 2 L
N
437.32 637.66 435.73 637.66 2 L
N
437.32 646.3 435.73 646.3 2 L
N
437.32 655.02 435.73 655.02 2 L
N
437.32 663.66 435.73 663.66 2 L
N
437.32 672.37 435.73 672.37 2 L
N
437.32 681.01 435.73 681.01 2 L
N
437.32 689.72 435.73 689.72 2 L
N
437.32 698.36 435.73 698.36 2 L
N
437.32 707.07 435.73 707.07 2 L
N
437.32 715.71 435.73 715.71 2 L
N
437.32 542.27 434.15 542.27 2 L
N
437.32 559.62 434.15 559.62 2 L
N
437.32 576.97 434.15 576.97 2 L
N
437.32 594.32 434.15 594.32 2 L
N
437.32 611.67 434.15 611.67 2 L
N
437.32 629.03 434.15 629.03 2 L
N
437.32 646.3 434.15 646.3 2 L
N
437.32 663.66 434.15 663.66 2 L
N
437.32 681.01 434.15 681.01 2 L
N
437.32 698.36 434.15 698.36 2 L
N
0 0 0 1 0 0 0 K
6 7 Q
(0) 442.14 539.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 442.14 557.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 442.14 574.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 442.14 591.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 442.14 609.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(50) 442.14 626.69 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 442.14 643.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 442.14 661.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(80) 442.14 678.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(90) 442.14 696.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100) 442.14 713.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 8 Q
(CPU % Utilization) 0 -90 461.01 660.51 TF
0 0 0 1 0 0 0 K
437.32 715.71 434.15 715.71 2 L
N
335.34 705.49 351.76 705.49 351.76 714.13 335.34 714.13 4 Y
2 X
V
0 H
0 Z
1 X
N
0 0 0 1 0 0 0 K
6 7 Q
0 X
( Write throughput) 355.86 707.48 T
0 0 0 1 0 0 0 K
335.34 705.49 351.76 705.49 351.76 714.13 335.34 714.13 335.34 705.49 5 L
0.5 H
1 Z
N
335.34 692.53 351.76 692.53 351.76 701.17 335.34 701.17 4 Y
7 X
V
0 H
0 Z
1 X
N
0 0 0 1 0 0 0 K
0 X
( Server CPU utilization) 355.86 694.52 T
0 0 0 1 0 0 0 K
335.34 692.53 351.76 692.53 351.76 701.17 335.34 701.17 335.34 692.53 5 L
7 X
V
0.5 H
1 Z
0 X
N
335.34 679.57 351.76 679.57 351.76 688.21 335.34 688.21 4 Y
10 X
V
0 H
0 Z
1 X
N
0 0 0 1 0 0 0 K
0 X
( Client CPU utilization) 355.86 681.56 T
0 0 0 1 0 0 0 K
335.34 679.57 351.76 679.57 351.76 688.21 335.34 688.21 335.34 679.57 5 L
13 X
V
0.5 H
1 Z
0 X
N
0 0 0 1 0 0 0 K
(no Presto) 189.63 526.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(no Presto) 231.18 526.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( Presto) 276.61 526.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Presto) 319.2 526.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(no Presto) 355.88 526.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Presto) 402.29 526.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WG = write gathering) 205.7 706.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V2 = Version 2) 205.7 696.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V3 = Version 3) 205.7 686.75 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(Figure 2.) 135.68 513.61 T
(Comparisons of 10MB file writes over FDDI, Digital OSF/1, Digital 3000/600) 168.34 513.61 T
189.51 542.19 189.51 550.76 199.38 550.76 199.38 542.19 189.51 542.19 5 Y
2 X
V
0 H
0 Z
1 X
N
231.13 542.19 231.13 565.81 240.92 565.81 240.92 542.19 231.13 542.19 5 Y
2 X
V
1 X
N
272.67 542.19 272.67 605.41 282.46 605.41 282.46 542.19 272.67 542.19 5 Y
2 X
V
1 X
N
314.21 542.19 314.21 604.83 324.01 604.83 324.01 542.19 314.21 542.19 5 Y
2 X
V
1 X
N
355.76 542.19 355.76 604.18 365.62 604.18 365.62 542.19 355.76 542.19 5 Y
2 X
V
1 X
N
397.38 542.19 397.38 605.41 407.17 605.41 407.17 542.19 397.38 542.19 5 Y
2 X
V
1 X
N
189.51 542.19 189.51 550.76 199.38 550.76 199.38 542.19 189.51 542.19 5 L
0.5 H
1 Z
0 X
N
231.13 542.19 231.13 565.81 240.92 565.81 240.92 542.19 231.13 542.19 5 L
N
272.67 542.19 272.67 605.41 282.46 605.41 282.46 542.19 272.67 542.19 5 L
N
314.21 542.19 314.21 604.83 324.01 604.83 324.01 542.19 314.21 542.19 5 L
N
355.76 542.19 355.76 604.18 365.62 604.18 365.62 542.19 355.76 542.19 5 L
N
397.38 542.19 397.38 605.41 407.17 605.41 407.17 542.19 397.38 542.19 5 L
N
199.38 542.19 199.38 557.82 209.17 557.82 209.17 542.19 199.38 542.19 5 Y
7 X
V
0 H
0 Z
1 X
N
240.92 542.19 240.92 568.26 250.71 568.26 250.71 542.19 240.92 542.19 5 Y
7 X
V
1 X
N
282.46 542.19 282.46 608.14 292.26 608.14 292.26 542.19 282.46 542.19 5 Y
7 X
V
1 X
N
324.01 542.19 324.01 604.61 333.87 604.61 333.87 542.19 324.01 542.19 5 Y
7 X
V
1 X
N
365.62 542.19 365.62 582.08 375.42 582.08 375.42 542.19 365.62 542.19 5 Y
7 X
V
1 X
N
407.17 542.19 407.17 583.81 416.96 583.81 416.96 542.19 407.17 542.19 5 Y
7 X
V
1 X
N
199.38 542.19 199.38 557.82 209.17 557.82 209.17 542.19 199.38 542.19 5 L
0.5 H
1 Z
0 X
N
240.92 542.19 240.92 568.26 250.71 568.26 250.71 542.19 240.92 542.19 5 L
N
282.46 542.19 282.46 608.14 292.26 608.14 292.26 542.19 282.46 542.19 5 L
N
324.01 542.19 324.01 604.61 333.87 604.61 333.87 542.19 324.01 542.19 5 L
N
365.62 542.19 365.62 582.08 375.42 582.08 375.42 542.19 365.62 542.19 5 L
N
407.17 542.19 407.17 583.81 416.96 583.81 416.96 542.19 407.17 542.19 5 L
N
209.17 542.19 209.17 556.09 218.96 556.09 218.96 542.19 209.17 542.19 5 Y
10 X
V
0 H
0 Z
1 X
N
250.71 542.19 250.71 566.46 260.58 566.46 260.58 542.19 250.71 542.19 5 Y
10 X
V
1 X
N
292.26 542.19 292.26 589.06 302.12 589.06 302.12 542.19 292.26 542.19 5 Y
10 X
V
1 X
N
333.87 542.19 333.87 589.06 343.66 589.06 343.66 542.19 333.87 542.19 5 Y
10 X
V
1 X
N
375.42 542.19 375.42 585.54 385.21 585.54 385.21 542.19 375.42 542.19 5 Y
10 X
V
1 X
N
416.96 542.19 416.96 583.81 426.82 583.81 426.82 542.19 416.96 542.19 5 Y
10 X
V
1 X
N
209.17 542.19 209.17 556.09 218.96 556.09 218.96 542.19 209.17 542.19 5 L
13 X
V
0.5 H
1 Z
0 X
N
250.71 542.19 250.71 566.46 260.58 566.46 260.58 542.19 250.71 542.19 5 L
13 X
V
0 X
N
292.26 542.19 292.26 589.06 302.12 589.06 302.12 542.19 292.26 542.19 5 L
13 X
V
0 X
N
333.87 542.19 333.87 589.06 343.66 589.06 343.66 542.19 333.87 542.19 5 L
13 X
V
0 X
N
375.42 542.19 375.42 585.54 385.21 585.54 385.21 542.19 375.42 542.19 5 L
13 X
V
0 X
N
416.96 542.19 416.96 583.81 426.82 583.81 426.82 542.19 416.96 542.19 5 L
13 X
V
0 X
N
0 0 0 1 0 0 0 K
6 7 Q
(320 KB/s) 191.52 563.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(885 KB/s) 232.02 572.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2368 KB/s) 273.19 611.85 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2346 KB/s) 314.19 608.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2323 KB/s) 356.19 608.85 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2370 KB/s) 397.36 609.02 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 72 288 422.98 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
-0.53 (maximum throughput of 6425 KB/s was achieved with) 72 416.31 P
-0.34 (NFS Version 3 and Prestoserve. Throughput increased) 72 404.31 P
0.24 (with this configuration change, but not to the point of) 72 392.31 P
-0.1 (the disk bandwidth limitation or CPU exhaustion. The) 72 380.31 P
-0.01 (bottleneck moved to the network because of the limit-) 72 368.31 P
-0.02 (ed number of stations, limited application parallelism,) 72 356.31 P
1.77 (and FDDI token holding time characteristics of the) 72 344.31 P
(network interfaces.) 72 332.31 T
1.48 (We conclude that asynchronous writes improve) 90.36 316.31 P
-0.56 (both client throughput and server efficiency. They pro-) 72 304.31 P
0.96 (vide most of the benefits associated with running an) 72 292.31 P
0.23 (NFS Version 2 server in \322unsafe\323 mode, while ensur-) 72 280.31 P
1.87 (ing data reliability after server failure) 72 268.31 P
2 8 Q
1.5 (3) 231.03 272.31 P
2 10 Q
1.87 (. Prestoserve) 235.03 268.31 P
-0.5 (should still accelerate small file writes, as well as other) 72 256.31 P
(modifying requests like) 72 244.31 T
3 9 Q
(CREATE) 168.94 244.31 T
2 10 Q
( and) 201.34 244.31 T
3 9 Q
(REMOVE) 220.78 244.31 T
2 10 Q
(.) 253.18 244.31 T
0 12 Q
(5.3.) 72 222.98 T
(Connectathon test suite results) 103.5 222.98 T
2 10 Q
-0.01 (Because the LADDIS benchmark generates NFS Ver-) 72 204.31 P
1.66 (sion 2 RPC calls directly to measure server perfor-) 72 192.31 P
1.1 (mance) 72 180.31 P
1 F
1.1 ([Wittle93]) 101.7 180.31 P
2 F
1.1 (, it cannot measure NFS Version 3) 143.37 180.31 P
1.77 (without modification. As an alternative, we ran the) 72 168.31 P
0.7 (Connectathon test suite, which was developed to test) 72 156.31 P
1.33 (the interoperability of NFS implementations. It runs) 72 144.31 P
0 0 0 1 0 0 0 K
72 126 288 140.98 C
0 0 0 1 0 0 0 K
81 138.96 225 138.96 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
2 6.4 Q
0 X
0 0 0 1 0 0 0 K
1.08 (3) 72 123.87 P
1 8 Q
1.35 ([Nelson88b]) 77.88 120.67 P
2 F
1.35 ( suggests that unsafe writes would provide greater) 118.33 120.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.23 (throughput than asynchronous writes with close-to-open consisten-) 72 111.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (cy. That is, assuming that) 72 102.67 P
3 F
-0.71 (COMMIT) 154.3 102.67 P
2 F
-0.29 ( blocks until all remaining data is) 183.1 102.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.38 (on disk when a file is closed, unsafe mode implementations which) 72 93.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (do not block would clearly perform better. For large files, this effect) 72 84.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(should be minimal.) 72 75.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
324 72 540 422.98 R
7 X
V
2 10 Q
0 X
0.08 (on the client on a remotely mounted directory and ex-) 324 416.31 P
0.18 (ercises both client and server NFS code. It consists of) 324 404.31 P
0.09 (three passes that cover the basic functionality of a file) 324 392.31 P
-0.32 (system. The Basic pass isolates specific features of the) 324 380.31 P
1.31 (client file system, and consists of ten separate tests.) 324 368.31 P
2.01 (Testing a single client file system feature typically) 324 356.31 P
1.49 (generates a mix of NFS requests. The General pass) 324 344.31 P
0.38 (runs multiple simultaneous large compiles, as well as) 324 332.31 P
1 F
-0.09 (nroff\0501\051) 324 320.31 P
2 F
-0.09 (. The Special pass exercises boundary cases in) 355.11 320.31 P
(NFS operations.) 324 308.31 T
0.82 (Table 1 contains the results of running the Con-) 342.36 290.07 P
0.54 (nectathon test suite. We conclude the following from) 324 278.07 P
(these results:) 324 266.07 T
(\245) 324 247.82 T
1.57 (Again, NFS Version 3 asynchronous writes are) 333 247.82 P
(clearly a win \050see test 5a\051.) 333 235.82 T
(\245) 324 221.58 T
-0.08 (Prestoserve remains useful on the server for other) 333 221.58 P
1.26 (metadata operations \050) 333 209.58 P
3 9 Q
2.72 (CREATE) 421.61 209.58 P
2 10 Q
1.26 (,) 454.01 209.58 P
3 9 Q
2.72 (REMOVE) 460.26 209.58 P
2 10 Q
1.26 (, etc.\051, as) 492.66 209.58 P
-0.1 (shown by tests 1, 2, 4, 6, 7 and 8. Test 6 performs) 333 197.58 P
0.55 (file deletions in addition to reading directory en-) 333 185.58 P
0.27 (tries, which explains the improvement with Pres-) 333 173.58 P
(toserve.) 333 161.58 T
(\245) 324 147.33 T
0.58 (NFS Version 3 reduces the total number of RPC) 333 147.33 P
1.38 (messages by 18% compared to NFS Version 2.) 333 135.33 P
0.1 (The reduction is due entirely to the increased fre-) 333 123.33 P
2.55 (quency of returned attributes and better cache) 333 111.33 P
(management through weak cache consistency da-) 333 99.33 T
-0.53 (ta. This reduction more than offsets the calls to the) 333 87.33 P
(new) 333 75.33 T
3 9 Q
(ACCESS) 352.16 75.33 T
2 10 Q
( and) 384.56 75.33 T
3 9 Q
(COMMIT) 404 75.33 T
2 10 Q
( RPC procedures.) 436.4 75.33 T
70 432 542 736 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
(T) 74.67 704 T
(est) 79.84 704 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Basic test description) 148.75 704 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 289.42 709 T
(ersion 2 NFS) 295.08 709 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(no Pr) 298.96 699 T
(esto) 320.05 699 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 354.54 709 T
(ersion 3NFS) 360.21 709 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(no Pr) 362.96 699 T
(esto) 384.05 699 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 417.42 709 T
(ersion 2 NFS) 423.08 709 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with Pr) 423.21 699 T
(esto) 451.8 699 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 481.42 709 T
(ersion 3 NFS) 487.08 709 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with Pr) 487.21 699 T
(esto) 515.79 699 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(1) 80.25 681 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(File and directory creation) 96 685 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(create 155 \336les 62 directories 5 levels deep) 96 676 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.39) 310.23 681 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.21) 374.23 681 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.87) 438.23 681 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.77) 502.23 681 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 80.25 659.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(File and directory removal) 96 664 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(remove 155 \336les 62 directories 5 levels deep) 96 655 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.71) 310.23 659.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.66) 374.23 659.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.60) 438.23 659.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.20) 502.23 659.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 80.25 638.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lookups across mount point) 96 643 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(500 getwd and stat calls) 96 634 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.81) 310.23 638.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.81) 374.23 638.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.74) 438.23 638.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.71) 502.23 638.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 80.25 617.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(setattr) 96 622 T
(, getattr) 117.64 622 T
(, and lookup) 144.77 622 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1000 chmods and stats on 10 \336les) 96 613 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 306.06 617.5 T
(1.18) 310.23 617.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 370.06 617.5 T
(1.18) 374.23 617.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.94) 438.23 617.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.00) 502.23 617.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5a) 78.25 601 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(write 1MB \336le 10 times) 96 601 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12.00) 305.73 601 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.35) 374.23 601 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.68) 438.23 601 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.69) 502.23 601 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(throughput) 115.17 589 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(869 KB/s) 304.75 589 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1957 KB/s) 364.25 589 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2238 KB/s) 428.25 589 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2234 KB/s) 492.25 589 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5b) 78 577 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(read 1MB \336le 10 times) 96 577 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.48) 310.23 577 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.48) 374.23 577 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.49) 438.23 577 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.47) 502.23 577 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(throughput) 115.17 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7056 KB/s) 300.25 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7052 KB/s) 364.25 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7019 KB/s) 428.25 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7128 KB/s) 492.25 565 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 80.25 548.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(readdir) 96 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20500 entries read, 200 \336les) 96 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.87) 310.23 548.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.79) 374.23 548.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.40) 438.23 548.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.96) 502.23 548.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 80.25 527.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(link and rename) 96 532 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(200 renames and links on 10 \336les) 96 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.71) 310.23 527.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.71) 374.23 527.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.22) 438.23 527.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.10) 502.23 527.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 80.25 506.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(symlink and readlink) 96 511 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(400 symlinks and readlinks on 10 \336les) 96 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.73) 310.23 506.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.70) 374.23 506.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.25) 438.23 506.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.98) 502.23 506.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 80.25 485.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(statfs) 96 490 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1500 statfs calls) 96 481 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.92) 310.23 485.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.50) 374.23 485.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.92) 438.23 485.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.40) 502.23 485.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Basic tests NFS RPC count) 73 468 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13166) 303.48 468 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 367.81 468 T
(1032) 371.98 468 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13166) 431.48 468 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 495.81 468 T
(1032) 499.98 468 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 73 456 T
(otal NFS RPC count for Basic, General and Special tests) 77.87 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21865) 303.48 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17764) 367.48 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21865) 431.48 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17764) 495.48 456 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(T) 95.94 440 T
(able 1: Connectathon Basic test suite r) 101.11 440 T
(esults, 7 biods, single disk spindle, \050r) 247.94 440 T
(esults in seconds, except as noted\051) 387.06 440 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71 717.75 71 452.25 2 L
V
0.5 H
0 Z
N
94 718.25 94 476 2 L
V
N
285 718.25 285 451.75 2 L
V
N
349 718.25 349 451.75 2 L
V
N
413 718.25 413 451.75 2 L
V
N
477 718.25 477 451.75 2 L
V
N
541 717.75 541 452.25 2 L
V
N
70.75 718 541.25 718 2 L
V
N
70.75 694 541.25 694 2 L
V
2 H
N
70.75 672 541.25 672 2 L
V
0.5 H
N
70.75 651 541.25 651 2 L
V
N
70.75 630 541.25 630 2 L
V
N
70.75 609 541.25 609 2 L
V
N
70.75 585 541.25 585 2 L
V
N
70.75 561 541.25 561 2 L
V
N
70.75 540 541.25 540 2 L
V
N
70.75 519 541.25 519 2 L
V
N
70.75 498 541.25 498 2 L
V
N
70.75 477 541.25 477 2 L
V
2 H
N
70.75 464 541.25 464 2 L
V
0.5 H
N
70.75 452 541.25 452 2 L
V
N
71.08 430.5 536.92 430.5 2 L
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 70.5 540 315 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
(Table 2:) 262.71 291 T
7 F
(\336nd\0501\051) 296.71 291 T
0 F
( r) 321.71 291 T
(esults) 327.79 291 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(NFS V) 223.25 268.5 T
(ersion 2) 247.51 268.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NFS V) 326.67 274 T
(ersion 3) 350.92 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(w/) 321.14 263 T
3 8 Q
(READDIRPLUS) 332.39 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(NFS V) 430.92 274 T
(ersion 3) 455.17 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(w/o) 423.14 263 T
3 8 Q
(READDIRPLUS) 438.89 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(real time) 104.67 249 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9.9s) 253.42 249 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.3s) 355.58 249 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12.3s) 455.75 249 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(client system time) 104.67 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.8s) 253.42 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.1s) 355.58 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6s) 460.25 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
(GETATTR) 104.67 222 T
2 9 Q
( count) 138.27 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(155) 254.67 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1%) 283.84 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(155) 356.83 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13%) 384 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(155) 461.5 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1%) 492.34 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
(LOOKUP) 104.67 209 T
2 9 Q
( count) 133.47 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10076) 245.67 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(95%) 279.34 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(155) 356.83 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13%) 384 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10076) 452.5 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(92%) 487.84 209 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
(ACCESS) 104.67 196 T
2 9 Q
( count) 133.47 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(n/a) 257.17 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(310) 356.83 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27%) 384 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(310) 461.5 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2%) 492.34 196 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
(READDIR) 104.67 183 T
2 9 Q
( count) 138.27 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(173) 254.67 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1%) 283.84 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0) 365.83 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0%) 388.5 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(181) 461.5 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1%) 492.34 183 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
(READDIRPLUS) 104.67 170 T
2 9 Q
( count) 157.47 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(n/a) 257.17 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(358) 356.83 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31%) 384 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0) 470.5 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0%) 492.34 170 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
(STATFS) 104.67 157 T
2 9 Q
(/) 133.47 157 T
3 8 Q
(FSSTAT) 135.97 157 T
2 9 Q
( count) 164.77 157 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(155) 254.67 157 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1%) 283.84 157 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(155) 356.83 157 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13%) 384 157 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(155) 461.5 157 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1%) 492.34 157 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 104.67 144 T
(otal count) 109.54 144 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10559) 245.67 144 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100%) 274.84 144 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 352.67 144 T
(133) 356.83 144 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100%) 379.5 144 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10877) 452.5 144 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100%) 483.34 144 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(bytes sent) 104.67 130 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2108523) 236.67 130 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(225209) 343.33 130 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2214575) 443.5 130 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(bytes received) 104.67 117 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1973952) 236.67 117 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2088284) 338.83 117 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3270824) 443.5 117 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total bytes over the wire) 104.67 104 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4082475) 236.67 104 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2313493) 338.83 104 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5485399) 443.5 104 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(client CPU utilization) 104.67 90 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53%) 251.67 90 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42%) 353.84 90 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44%) 458.5 90 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(server CPU utilization) 104.67 77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37%) 251.67 77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32%) 353.84 77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31%) 458.5 77 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
102.67 281.75 102.67 72.25 2 L
V
0.5 H
0 Z
N
198.67 282.25 198.67 71.75 2 L
V
N
300.83 282.25 300.83 71.75 2 L
V
N
405.5 282.25 405.5 71.75 2 L
V
N
509.33 281.75 509.33 72.25 2 L
V
N
102.42 282 509.58 282 2 L
V
N
102.42 258 509.58 258 2 L
V
2 H
N
102.42 244 509.58 244 2 L
V
0.5 H
N
102.42 231 509.58 231 2 L
V
2 H
N
102.42 217 509.58 217 2 L
V
0.5 H
N
102.42 204 509.58 204 2 L
V
N
102.42 191 509.58 191 2 L
V
N
102.42 178 509.58 178 2 L
V
N
102.42 165 509.58 165 2 L
V
N
102.42 152 509.58 152 2 L
V
N
102.42 139 509.58 139 2 L
V
2 H
N
102.42 125 509.58 125 2 L
V
0.5 H
N
102.42 112 509.58 112 2 L
V
N
102.42 99 509.58 99 2 L
V
2 H
N
102.42 85 509.58 85 2 L
V
0.5 H
N
102.42 72 509.58 72 2 L
V
N
73.08 301.93 538.92 301.93 2 L
2 Z
N
72 553.67 541 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 553.67 541 720 R
7 X
0 0 0 1 0 0 0 K
V
0 8 Q
0 X
(Figure 4. Detail of RPC counts for all three passes of the Connectathon Test Suite) 89 557.33 T
2 F
(NFS Version 2) 88 712.67 T
(NFS Version 3) 88 634.33 T
3 F
(calls) 103 626.5 T
(calls) 103 705.33 T
(21865) 103 697.33 T
(null       getattr    setattr    root       lookup     readlink   read) 103 687.33 T
(0  0%      4058 18%   1168  5%   0  0%      6954 31%   250  1%    1779  8%) 103 679.33 T
(wrcache    write      create     remove     rename     link       symlink) 103 671.33 T
(0  0%      1881  8%   675  3%    1175  5%   352  1%    250  1%    250  1%) 103 663.33 T
(mkdir      rmdir      readdir    statfs) 103 655.33 T
(173  0%    173  0%    972  4%    1755  8%) 103 647.33 T
(17764) 103 618.5 T
(null       getattr    setattr    lookup     access     readlink   read) 102 609.5 T
(0  0%      1282  7%   1168  6%   5499 30%   309  1%    250  1%    1731  9%) 102 601.5 T
(write      create     mkdir      symlink    mknod      remove     rmdir) 102 593.5 T
(1881 10%   675  3%    173  0%    250  1%    0  0%      1175  6%   173  0%) 102 585.5 T
(rename     link       readdir    readdir+   fsstat     fsinfo     pathconf) 102 577.5 T
(352  1%    250  1%    758  4%    18  0%     1755  9%   0  0%      0  0%) 102 569.5 T
(commit) 471 577.5 T
(65  0%) 471 569.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
73.08 550.09 538.92 550.09 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
2 10 Q
1.22 (The read throughput results from test 5b reflect) 90.36 535 P
0.55 (over-the-wire data transfers. Test 5b was modified to) 72 523 P
0.41 (use the) 72 511 P
1 F
0.41 (mmap\0502\051) 103.36 511 P
2 F
0.41 ( system call to invalidate the client\325s) 139.46 511 P
1.14 (data cache, forcing the requests to go over-the-wire.) 72 499 P
0.52 (However, the data was cached on the server. The de-) 72 487 P
0.14 (tailed RPC counts for the NFS Version 2 and Version) 72 475 P
(3 results are shown in Figure 4.) 72 463 T
0 12 Q
(5.4.) 72 438.78 T
7 F
(find\0501\051) 103.5 438.78 T
0 F
( results) 137.5 438.78 T
2 10 Q
0.48 (The) 72 417.22 P
1 F
0.48 (find\0501\051) 90.53 417.22 P
2 F
0.48 ( command was used to measure the effect) 117.75 417.22 P
1.19 (of) 72 405.22 P
3 9 Q
2.56 (READDIRPLUS) 84.02 405.22 P
2 10 Q
1.19 (.) 143.42 405.22 P
1 F
1.19 (find\0501\051) 149.6 405.22 P
2 F
1.19 ( scanned a remote file tree) 176.82 405.22 P
0.63 (containing 9612 files distributed over 155 directories) 72 393.22 P
2.22 (that were up to seven levels deep. The results are) 72 381.22 P
0.93 (shown in Table 2. The over-the-wire byte counts in-) 72 369.22 P
(clude all protocol headers.) 72 357.22 T
0.03 (Using) 90.36 338.33 P
3 9 Q
0.06 (READDIRPLUS) 116.78 338.33 P
2 10 Q
0.03 ( to fetch file handles and at-) 176.18 338.33 P
-0.28 (tributes of entries in a directory reduces the) 72 326.33 P
1 F
-0.28 (find\0501\051) 245.79 326.33 P
2 F
-0.28 ( ex-) 273.01 326.33 P
-0.41 (ecution time by 36%, compared to NFS Version 2. Re-) 72 314.33 P
-0.43 (duced execution time can be attributed primarily to the) 324 535 P
0.31 (tenfold reduction in over-the-wire messages. The 155) 324 523 P
3 9 Q
3.77 (GETATTR) 324 511 P
2 10 Q
1.75 ( requests are generated to ensure close-to-) 361.8 511 P
-0.09 (open consistency when opening a directory. Using the) 324 499 P
3 9 Q
2.59 (READDIRPLUS) 324 487 P
2 10 Q
1.2 ( procedure in NFS Version 3 reduced) 383.4 487 P
0.98 (the total bytes transferred over-the-wire by 43% and) 324 475 P
3.61 (the cumulative server CPU \050percent utilization) 324 463 P
8 F
3.61 (\264) 534.51 463 P
2 F
-0.6 (elapsed time\051 by 46%, compared to using the) 324 451 P
3 9 Q
-1.3 (READDIR) 502.2 451 P
2 10 Q
7.5 (and) 324 439 P
3 9 Q
16.2 (LOOKUP) 348.44 439 P
2 10 Q
7.5 ( procedures in NFS Version 2.) 380.84 439 P
3 9 Q
(READDIRPLUS) 324 427 T
2 10 Q
( is clearly a win in this example.) 383.4 427 T
-0.61 (The test was rerun with) 342.36 410.33 P
3 9 Q
-1.31 (READDIRPLUS) 435.7 410.33 P
2 10 Q
-0.61 ( disabled in) 495.1 410.33 P
1.78 (NFS Version 3. The last column in Table 2 shows) 324 398.33 P
0.44 (these results. Disabling) 324 386.33 P
3 9 Q
0.95 (READDIRPLUS) 420.86 386.33 P
2 10 Q
0.44 ( increases exe-) 480.26 386.33 P
0.61 (cution time by 95%, compared to the NFS Version 3) 324 374.33 P
1.16 (result with) 324 362.33 P
3 9 Q
2.5 (READDIRPLUS) 371.31 362.33 P
2 10 Q
1.16 ( enabled. More disturbing,) 430.71 362.33 P
1.97 (execution time increased by 24%, compared to the) 324 350.33 P
1.29 (NFS Version 2 results. We attribute this to the new) 324 338.33 P
3 9 Q
-0.37 (ACCESS) 324 326.33 P
2 10 Q
-0.17 ( procedure and to larger message sizes in NFS) 356.4 326.33 P
0.39 (Version 3, which increased the total bytes transferred) 324 314.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
0.79 (by 34% when compared to NFS Version 2. Message) 72 713 P
-0.28 (sizes increased because new fields were added and old) 72 701 P
(fields were widened.) 72 689 T
1.65 (This result illustrates a fundamental tradeoff in) 90.36 672.76 P
-0.01 (the NFS Version 3 design: increased RPC request and) 72 660.76 P
0.12 (reply sizes are to be offset by new features in the pro-) 72 648.76 P
0.58 (tocol. Naive implementations that fail to use the new) 72 636.76 P
-0.44 (features will perform worse for some benchmarks than) 72 624.76 P
0.3 (NFS Version 2, but effective use of new features will) 72 612.76 P
(increase overall performance.) 72 600.76 T
0 12 Q
(6.) 72 577.19 T
(Cost of porting) 90 577.19 T
2 10 Q
1.09 (The Digital OSF/1 implementation illustrates the ef-) 72 558.29 P
0.05 (fort and cost to port the SunSoft NFS Version 3 refer-) 72 546.29 P
1.46 (ence source into an existing Version 2 implementa-) 72 534.29 P
0.79 (tion. The source code size of an implementation that) 72 522.29 P
2.21 (supports both protocols is roughly 30,000 lines \050C) 72 510.29 P
0.59 (code + comments + white space\051. The Version 2 and) 72 498.29 P
2.84 (Version 3 specific portions of the total are about) 72 486.29 P
0.58 (12,000 lines each, with 6,000 lines of shared subrou-) 72 474.29 P
0.22 (tines. Assuming engineers familiar with NFS Version) 72 462.29 P
-0.18 (2, the effort needed to produce an implementation that) 72 450.29 P
0.47 (supports both versions of the NFS protocol for initial) 72 438.29 P
(testing is the following:) 72 426.29 T
0.34 (Digital\325s OSF/1 based kernel uses a unified page) 90.36 356.05 P
0.66 (cache managed by the virtual memory subsystem for) 72 344.05 P
0.44 (both program text and file data. This complicated the) 72 332.05 P
-0.18 (client implementation of asynchronous writes because) 72 320.05 P
1.38 (of dependencies on data structures and interfaces in) 72 308.05 P
(the virtual memory system.) 72 296.05 T
0 12 Q
(7.) 72 272.48 T
(Related work) 90 272.48 T
2 9 Q
(\322Look on my works, ye Mighty) 90 260.24 T
(, and despair!\323) 203.41 260.24 T
1 F
(Ozymandias) 161.67 249.24 T
2 F
(,) 206.16 249.24 T
1 F
(Shelley) 210.66 249.24 T
(, 1817) 236.16 249.24 T
2 10 Q
1.59 (The NFS Version 3 protocol mitigates the need for) 72 231.33 P
2.71 (NFS-specific write gathering techniques on clients) 72 219.33 P
-0.4 (that support asynchronous writes, because a server can) 72 207.33 P
0.91 (now simply process clusters of related asynchronous) 72 195.33 P
0.33 (writes as part of its local buffered file system activity) 72 183.33 P
1 F
2.11 ([McVoy91]) 72 171.33 P
2 F
2.11 (. However, NFS-specific write-gathering) 118.1 171.33 P
2.09 (on servers is still useful in supporting less-capable) 72 159.33 P
0.96 (NFS Version 3 clients that do not support asynchro-) 72 147.33 P
0.13 (nous writes or more-capable clients that resort to syn-) 72 135.33 P
-0.33 (chronous behavior during recovery. The stable storage) 72 123.33 P
0.22 (semantics for metadata modifying operations, such as) 72 111.33 P
3 9 Q
-0.89 (CREATE) 72 99.33 P
2 10 Q
-0.41 (, remain unaffected by NFS Version 3. Thus, a) 104.4 99.33 P
0.92 (server can still benefit from fast stable storage. To a) 72 87.33 P
1.5 (lesser extent, fast stable storage techniques still im-) 72 75.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(server) 87 410.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1 person-month) 205 410.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(client \050excluding) 87 397.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(asynchronous writes\051) 99.5 386.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2 person-months) 205 392.45 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(client asynchronous writes) 87 373.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1 person-month) 205 373.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
2.06 (prove asynchronous) 324 713 P
3 9 Q
4.44 (WRITE) 410.87 713 P
2 10 Q
2.06 ( performance, especially) 437.87 713 P
(for small files.) 324 701 T
-0.19 (Adaptive retransmission strategies to improve the) 342.36 684.72 P
5.9 (behavior of NFS over UDP \050as described in) 324 672.72 P
1 F
-0.06 ([Nowicki89]) 324 660.72 P
2 F
-0.06 (, derived from) 374.56 660.72 P
1 F
-0.06 ([Jacobson88]) 433.81 660.72 P
2 F
-0.06 (\051 and the use) 489.36 660.72 P
1.03 (of TCP to improve performance over wide area net-) 324 648.72 P
-0.24 (works) 324 636.72 P
1 F
-0.24 ([Macklem91]) 350.7 636.72 P
2 F
-0.24 (, are applicable to NFS Version) 405.13 636.72 P
-0.24 (3.) 532.5 636.72 P
0.14 (NFS Version 3 relaxes the 8KB limitation on the data) 324 624.72 P
0.48 (portion of a) 324 612.72 P
3 9 Q
1.03 (READ) 374.59 612.72 P
2 10 Q
0.48 ( or) 396.19 612.72 P
3 9 Q
1.03 (WRITE) 410.47 612.72 P
2 10 Q
0.48 ( request, permitting more) 437.47 612.72 P
(efficient use of TCP.) 324 600.72 T
-0.08 (Three efforts to revise the NFS protocol are relat-) 342.36 584.45 P
-0.07 (ed to this work. The first is Spritely NFS, described in) 324 572.45 P
1 F
1.01 ([Srinivasan89]) 324 560.45 P
2 F
1.01 (,) 384.56 560.45 P
1 F
1.01 ([Mogul92]) 390.57 560.45 P
2 F
1.01 (, and) 434.46 560.45 P
1 F
1.01 ([Mogul93]) 458.43 560.45 P
2 F
1.01 (. Spritely) 502.32 560.45 P
0.2 (NFS uses a stateful server that controls client caching) 324 548.45 P
-0.24 (behavior to ensure consistency. State recovery follow-) 324 536.45 P
-0.62 (ing a crash is server-driven. The server keeps a nonvol-) 324 524.45 P
-0.34 (atile list of old clients that are contacted during a grace) 324 512.45 P
1.61 (period following reboot to initiate the rebuilding of) 324 500.45 P
0.07 (state on the server. Spritely NFS employs consistency) 324 488.45 P
-0.22 (to address performance issues in NFS Version 2 by al-) 324 476.45 P
0.89 (lowing clients to defer writes and by eliminating the) 324 464.45 P
-0.71 (need for clients to poll the server to detect file changes.) 324 452.45 P
-0.62 (The second effort is NQNFS) 342.36 436.17 P
1 F
-0.62 ([Macklem94]) 456.75 436.17 P
2 F
-0.62 (, which) 511.18 436.17 P
-0.39 (defines extensions to NFS Version) 324 424.17 P
-0.39 (2 that are similar to) 463.8 424.17 P
0.79 (those found in NFS Version 3. Size and offset fields) 324 412.17 P
0.52 (were widened to 64 bits, and a) 324 400.17 P
3 9 Q
1.12 (READDIRPLUS) 452.04 400.17 P
2 10 Q
0.52 ( proce-) 511.44 400.17 P
0.47 (dure was added. Time-based leases provide a mecha-) 324 388.17 P
-0.13 (nism for data consistency and cache coherence among) 324 376.17 P
-0.37 (clients. Clients need to anticipate lease expiration. Cli-) 324 364.17 P
-0.14 (ents do not have special recovery code. Instead, leases) 324 352.17 P
0.52 (are short enough to expire while the server is reboot-) 324 340.17 P
0.47 (ing, forcing clients to request renewals \050thereby driv-) 324 328.17 P
0.45 (ing recovery\051 from the newly rebooted server. On re-) 324 316.17 P
0.18 (boot, a server accepts only writes during a grace peri-) 324 304.17 P
(od, after which it will grant new leases.) 324 292.17 T
1.77 (While the results of both NQNFS and Spritely) 342.36 275.89 P
1.58 (NFS looked promising at the time we defined NFS) 324 263.89 P
-0.41 (Version) 324 251.89 P
-0.41 (3, both were unfinished. We decided that add-) 358.16 251.89 P
-0.29 (ing consistency to NFS was contrary to our minimalist) 324 239.89 P
(goals and best left for a subsequent revision.) 324 227.89 T
-0.02 (The third effort,) 342.36 211.61 P
1 F
-0.02 ([Fadden92]) 408.96 211.61 P
2 F
-0.02 ( and) 457.29 211.61 P
1 F
-0.02 ([Glover92]) 476.7 211.61 P
2 F
-0.02 (, de-) 522.25 211.61 P
-0.11 (scribed Trusted NFS) 324 199.61 P
-0.11 (\050TNFS\051, which defines a method) 409.06 199.61 P
2.73 (for handling ACLs and data labels that conserves) 324 187.61 P
0.11 (space. Acknowledging that security data can be large,) 324 175.61 P
-0.29 (TNFS maps the data into opaque tokens and requires a) 324 163.61 P
-0.22 (separate token mapping service to convert to and from) 324 151.61 P
0.95 (a canonical over-the-wire format. We decided not to) 324 139.61 P
0.7 (incorporate this work into NFS Version) 324 127.61 P
0.7 (3 because of) 488.61 127.61 P
-0.57 (instability in the POSIX ACL specification and the rel-) 324 115.61 P
-0.02 (ative immaturity of extant implementations of TNFS.) 324 103.61 P
0.05 (DCE DFS) 342.36 87.33 P
1 F
0.05 ([Kazar90]) 385.8 87.33 P
2 F
0.05 ( is related to NFS Version 3) 428.03 87.33 P
1.1 (only in that it describes an amount of effort that we) 324 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
0.72 (clearly did not want to undertake. Our primary goals) 72 713.33 P
-0.34 (were to improve NFS Version 2 and deploy a new ver-) 72 701.33 P
0.12 (sion quickly. We preferred to retain the ease of server) 72 689.33 P
0.1 (crash recovery, at the expense of not supporting some) 72 677.33 P
(of the more valuable features of DCE DFS.) 72 665.33 T
0 12 Q
(8.) 72 641.43 T
(Future work) 90 641.43 T
2 10 Q
-0.36 (The strategy for using) 72 622.19 P
3 9 Q
-0.78 (READDIRPLUS) 161.1 622.19 P
2 10 Q
-0.36 ( needs further re-) 220.5 622.19 P
0.31 (search. Reading the contents of a very large directory) 72 610.19 P
1.2 (with) 72 598.19 P
3 9 Q
2.59 (READDIRPLUS) 93.48 598.19 P
2 10 Q
1.2 ( can eject potentially more valu-) 152.88 598.19 P
1.02 (able entries from client caches. Finding heuristics to) 72 586.19 P
0.04 (guide choosing between) 72 574.19 P
3 9 Q
0.09 (READDIR) 171.28 574.19 P
2 10 Q
0.04 ( and) 209.08 574.19 P
3 9 Q
0.09 (READDIRPLUS) 228.6 574.19 P
2 10 Q
0.7 (is hard because an NFS client cannot tell whether an) 72 562.19 P
-0.05 (application will need attribute information for a direc-) 72 550.19 P
0.58 (tory\325s children or not. More experience could lead to) 72 538.19 P
(better heuristics than the simple ones used now.) 72 526.19 T
1.44 (An NFS Version 3 client trying to do effective) 90.36 509.62 P
1.29 (cache management with weak cache consistency re-) 72 497.62 P
-0.61 (quires that the server guarantee atomicity of modifying) 72 485.62 P
-0.38 (operations and pre- and post-operation attribute gener-) 72 473.62 P
0.15 (ation. The performance cost of supporting such atom-) 72 461.62 P
0.02 (icity on the server is not fully understood, particularly) 72 449.62 P
0.82 (for multiprocessor server implementations where ex-) 72 437.62 P
0.03 (tensive locking could result in unwanted serialization.) 72 425.62 P
-0.48 (More analysis is needed. Weak cache consistency with) 72 413.62 P
1.33 (the) 72 401.62 P
3 9 Q
2.88 (WRITE) 88.05 401.62 P
2 10 Q
1.33 ( procedure provides no useful sharing se-) 115.05 401.62 P
(mantic.) 72 389.62 T
2.37 (Additional characterization and tuning of NFS) 90.36 373.05 P
0.82 (Version) 72 361.05 P
0.82 (3 under more complex workloads is needed.) 106.16 361.05 P
2.12 (An NFS Version) 72 349.05 P
2.12 (3 LADDIS benchmark is needed.) 145.95 349.05 P
2.2 (Tuning NFS Version) 72 337.05 P
2.2 (3 implementations should not) 162.79 337.05 P
(pose insurmountable problems.) 72 325.05 T
0.75 (We did not expect the NFS Version 3 specifica-) 90.36 308.48 P
0.19 (tion to be perfect. Our hope is that the protocol speci-) 72 296.48 P
-0.22 (fication will grow to reflect common practice and pro-) 72 284.48 P
-0.34 (vide guidelines on conforming behavior. The develop-) 72 272.48 P
-0.48 (ment of an NFS Version 3 Validation Suite by SunSoft) 72 260.48 P
0.37 (will aid interoperability. Finally, interoperability test-) 72 248.48 P
1.1 (ing of implementations at Connectathon remains the) 72 236.48 P
(cornerstone of successful file sharing with NFS.) 72 224.48 T
0 12 Q
(8.1.) 72 202.57 T
(NFS Version 4) 103.5 202.57 T
2 10 Q
-0.44 (In defining NFS Version 3, we assumed that other pro-) 72 183.33 P
-0.18 (tocol revisions would follow, allowing us to defer fea-) 72 171.33 P
-0.32 (tures. Improved data and cache consistency is an obvi-) 72 159.33 P
0.62 (ous candidate for NFS Version 4. POSIX write-shar-) 72 147.33 P
0.05 (ing semantics exist today on a single NFS client. NFS) 72 135.33 P
3.09 (Versions) 72 123.33 P
3.09 (2 and 3 support a client-driven bounded) 110.05 123.33 P
1.33 (time-based model for write sharing) 72 111.33 P
1 F
1.33 ([Kazar88]) 221.66 111.33 P
2 F
1.33 (, with) 263.89 111.33 P
1.14 (close-to-open consistency. This model does not pro-) 72 99.33 P
-0.4 (vide sufficient guarantees for concurrent write-sharing) 72 87.33 P
0.27 (between cooperating clients in the absence of explicit) 72 75.33 P
0.07 (locking. The fact that write-sharing is infrequent even) 324 713.33 P
4.47 (in those distributed file systems that support it) 324 701.33 P
1 F
-0.5 ([Welch90]) 324 689.33 P
2 F
-0.5 ( is a reason NFS has been successful despite) 366.77 689.33 P
0.77 (this limitation. Both Spritely NFS and NQNFS dem-) 324 677.33 P
0.64 (onstrate how to provide stronger consistency guaran-) 324 665.33 P
-0.16 (tees with a provision for server and client crash recov-) 324 653.33 P
-0.46 (ery. Both approaches depend on the clients to re-estab-) 324 641.33 P
(lish state after server reboots.) 324 629.33 T
-0.11 (Disconnected operation of fixed and nomadic cli-) 342.36 612.72 P
0.49 (ents is a potential area for future work. More investi-) 324 600.72 P
3.23 (gation is required on how consistency guarantees) 324 588.72 P
0.33 (work, if at all, in the presence of clients disconnected) 324 576.72 P
0.55 (longer than the lease terms or callback timeouts used) 324 564.72 P
(by NQNFS or Spritely NFS, respectively.) 324 552.72 T
0.03 (Stronger security models in NFS are another area) 342.36 536.1 P
-0.56 (for future work. More research is needed on whether to) 324 524.1 P
(pursue trusted system support in general.) 324 512.1 T
0.08 (The problems of consistent name space construc-) 342.36 495.49 P
-0.35 (tion and increased availability are areas of research for) 324 483.49 P
0.74 (future protocol revisions and are perhaps best solved) 324 471.49 P
-0.19 (with innovative implementations using existing proto-) 324 459.49 P
(cols.) 324 447.49 T
0 12 Q
(9.) 324 423.54 T
(Conclusions) 342 423.54 T
2 10 Q
1.14 (The constrained NFS Version 3 effort addressed the) 324 404.26 P
(following concerns with NFS Version 2:) 324 392.26 T
(\245) 324 375.64 T
(64-bit file sizes are now supported.) 333 375.64 T
(\245) 324 363.03 T
-0.49 (Asynchronous writes increased throughput seven-) 333 363.03 P
2.17 (fold over unaccelerated NFS Version 2 imple-) 333 351.03 P
(mentations.) 333 339.03 T
(\245) 324 326.41 T
3.89 (Over-the-wire traffic measured both by RPC) 333 326.41 P
(counts and network loading has been reduced.) 333 314.41 T
(\245) 324 301.8 T
1.75 (Directory browsing is faster, with less network) 333 301.8 P
(loading and lower CPU utilization.) 333 289.8 T
(\245) 324 277.18 T
2.99 (Performance improvements were achieved de-) 333 277.18 P
1.08 (spite the size increase of the file attribute struc-) 333 265.18 P
(tures resulting from 64-bit file size support.) 333 253.18 T
(\245) 324 240.56 T
0.31 (Many \322minor annoyances\323 of the NFS Version 2) 333 240.56 P
(protocol have been corrected.) 333 228.56 T
1.65 (NFS Version 3 was specified, reviewed, proto-) 342.36 211.95 P
0.74 (typed, verified, and supplied by multiple vendors for) 324 199.95 P
0.02 (external testing in less than 24 months from the initial) 324 187.95 P
-0.02 (Boston meetings. At Connectathon in 1993, prototype) 324 175.95 P
7.94 (implementations interoperated successfully. We) 324 163.95 P
1.1 (achieved the goal of providing measurable improve-) 324 151.95 P
-0.29 (ments over NFS Version 2 with little effort required to) 324 139.95 P
(create an implementation.) 324 127.95 T
-0.43 (There is more work to be done. NFS Version 3 of-) 342.36 111.33 P
0.9 (fers the potential for better name and attribute cache) 324 99.33 P
-0.19 (management than is possible with NFS Version 2. Re-) 324 87.33 P
-0.37 (alization of this potential is a current and future effort.) 324 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(9.1.) 72 712 T
(Availability) 103.5 712 T
2 10 Q
-0.15 (The NFS Version 3 protocol specification draft can be) 72 692.53 P
14.71 (obtained from) 72 680.53 P
3 9 Q
31.77 (bcm.tmc.edu) 160.29 680.53 P
2 10 Q
14.71 (,) 219.69 680.53 P
3 9 Q
31.77 (gatekeep-) 239.4 680.53 P
8.52 (er.dec.com) 72 668.53 P
2 10 Q
3.94 ( and) 126 668.53 P
3 9 Q
8.52 (ftp.uu.net) 153.33 668.53 P
2 10 Q
3.94 ( using anonymous) 207.33 668.53 P
(FTP.) 72 656.53 T
-0.17 (NFS Version 3 will be available in the next major) 90.36 639.73 P
0.62 (release of Digital\325s OSF/1. Servers will fully support) 72 627.73 P
0.24 (NFS Version 3, as well as provide NFS Version 2 for) 72 615.73 P
0.98 (interoperability with older clients. At SunSoft, a So-) 72 603.73 P
-0.15 (laris 2 implementation of NFS Version 3 that supports) 72 591.73 P
-0.59 (TCP and large transfer sizes is in early deployment and) 72 579.73 P
0.05 (will shortly go to external field test. In addition, a ref-) 72 567.73 P
1.45 (erence implementation of NFS Version 3 with TCP) 72 555.73 P
-0.12 (support is undergoing final testing. Early access to the) 72 543.73 P
-0.48 (reference implementation from SunSoft will occur this) 72 531.73 P
0.08 (summer. Other implementations are in progress. Con-) 72 519.73 P
(tact your vendor for further information.) 72 507.73 T
-0.22 (SunSoft is developing an NFS Version 3 Protocol) 90.36 490.93 P
1.13 (Validation Suite to provide a tool to help ensure in-) 72 478.93 P
1.61 (teroperability of clients and servers. This validation) 72 466.93 P
(suite will be made available for licensing.) 72 454.93 T
0 12 Q
(10.) 72 430.8 T
(Acknowledgments) 90 430.8 T
2 10 Q
1.73 (Rusty Sandberg was the author of the earliest NFS) 72 411.33 P
2.21 (Version 3 proposal. Eight specifications intervened) 72 399.33 P
0.58 (between then and now; in many ways we returned to) 72 387.33 P
-0.09 (the simplicity of the original. Peter Staubach designed) 72 375.33 P
17.55 (the versions of asynchronous writes,) 72 363.33 P
3 9 Q
1.38 (NFS3ERR_JUKEBOX) 72 351.33 P
2 10 Q
0.64 (, and) 153 351.33 P
3 9 Q
1.38 (READDIRPLUS) 176.22 351.33 P
2 10 Q
0.64 ( described in) 235.62 351.33 P
1.27 (this paper. Peter also introduced the notion of weak) 72 339.33 P
-0.17 (cache consistency in NFS. The Boston group included) 72 327.33 P
2.37 (Cathe Ray, Carl Smith, Peter Staubach, and Brian) 72 315.33 P
1.69 (Pawlowski of SunSoft, Inc., Fred Glover, and Chet) 72 303.33 P
2.33 (Juszczak of Digital, Mark Wittle of Data General,) 72 291.33 P
0.47 (John Gillono of Cray Research, Tom Talpey of OSF,) 72 279.33 P
0.51 (and Geoff Arnold of SunSelect, Inc. Spencer Shepler) 72 267.33 P
0.32 (of IBM would have joined us but for his wedding; he) 72 255.33 P
1.97 (did participate in the post-Boston discussion.) 72 243.33 P
1.97 (Chris) 266.33 243.33 P
0.6 (Duke has been very supportive in his role as the Sun) 72 231.33 P
1.33 (NFS engineering manager) 72 219.33 P
1.33 (.) 179.08 219.33 P
1.33 ( Charlie Briggs at Digital) 181.58 219.33 P
-0.09 (reviewed early drafts and suggested the state diagram.) 72 207.33 P
1.52 (Eric Werme at Digital worked on the server imple-) 72 195.33 P
0.1 (mentation. Michael Kupfer implemented the Network) 72 183.33 P
0.41 (Lock Manager reference source. Brent Callaghan im-) 72 171.33 P
3.21 (plemented the original MOUNT reference source.) 72 159.33 P
-0.01 (Glen Dudek at VGI, our paper shepherd for USENIX,) 72 147.33 P
0.82 (provided invaluable detailed reviews beyond the call) 72 135.33 P
1.35 (of duty. Jeffrey Mogul commented on a very rough) 72 123.33 P
0.18 (early draft. Chris Duke, Byron Rakitzis, Rob Salmon,) 72 111.33 P
2.32 (Dana Treadwell, Rusty Sandberg, Kim Pawlowski,) 72 99.33 P
2.09 (Olga Koudalides, Ellie Koudalides, Michael Eisler,) 72 87.33 P
-0.52 (Brian Ehrmantraut, Michael Nelson, Tom Talpey, Bob) 72 75.33 P
4.76 (Lyon, Cheena Srinivasan, Eric Werme, Michael) 324 713.33 P
1.22 (Kupfer and Tom Tierney reviewed various drafts of) 324 701.33 P
1.42 (this paper on an outrageously compressed schedule.) 324 689.33 P
2.39 (Chad Davies, Richard Binder, and Karla Sorenson) 324 677.33 P
1.26 (greatly improved the readability of this paper. Mike) 324 665.33 P
(Kazar kept the paper honest.) 324 653.33 T
0 12 Q
(11.) 324 628.82 T
(Bibliography) 342 628.82 T
2 9 Q
2.24 ([Arnold91] Arnold, Geof) 324 613.64 P
2.24 (f., \322Change and Non-change in) 419.05 613.64 P
5.11 (NFS,\323) 324 603.64 P
1 F
5.11 ( Pr) 346.75 603.64 P
5.11 (oc. of Eur) 362.78 603.64 P
5.11 (opean Sun Users Gr) 408.41 603.64 P
5.11 (oup) 496.64 603.64 P
2 F
5.11 (, 1991) 510.14 603.64 P
1 F
5.11 (.) 537.75 603.64 P
(Discusses changes r) 324 593.64 T
(equiring a pr) 396.66 593.64 T
(otocol r) 443.83 593.64 T
(evision in NFS.) 471.74 593.64 T
2 F
0.69 ([Bhide91] Bhide, A., Elnozahy) 324 580.46 P
0.69 (, E., Mor) 437.47 580.46 P
0.69 (gan, S., \322A Highly) 470.93 580.46 P
8.11 (A) 324 570.46 P
8.11 (vailable Network File Server) 329.83 570.46 P
8.11 (,\323) 458.03 570.46 P
1 F
8.11 ( W) 464.28 570.46 P
8.11 (inter USENIX) 481.64 570.46 P
1.76 (Confer) 324 560.46 P
1.76 (ence Pr) 348.67 560.46 P
1.76 (oceedings) 377.83 560.46 P
2 F
1.76 (, USENIX Association, Berkeley) 413.82 560.46 P
1.76 (,) 537.75 560.46 P
9.34 (CA, January 1991.) 324 550.46 P
1 F
9.34 (Describes an NFS server) 421.75 550.46 P
2.12 (implementation using r) 324 540.46 P
2.12 (edundant servers and dual-ported) 411.41 540.46 P
(disks that logs volatile r) 324 530.45 T
(eply cache information to disk.) 410.17 530.45 T
2 F
4.73 ([Fadden92] Fadden, Fran, \322T) 324 517.27 P
4.73 (oken Mapping Service,\323) 442.8 517.27 P
3.02 (T) 324 507.27 P
3.02 (rusted System Interest Group, TSIG document TSIG-) 329.18 507.27 P
0 (TNFS-006.01.01, May 24, 1992.) 324 497.27 P
1 F
0 ( Description of the security) 442 497.27 P
(token mapping scheme pr) 324 487.27 T
(oposed in TNFS.) 415.9 487.27 T
2 F
2.73 ([Glover92] Glover) 324 474.09 P
2.73 (, Fred, \322Request for Comments on a) 393.61 474.09 P
0.01 (Speci\336cation of T) 324 464.09 P
0.01 (rusted NFS \050TNFS\051 Protocol Extensions,\323) 388.2 464.09 P
3.02 (T) 324 454.09 P
3.02 (rusted System Interest Group, TSIG document TSIG-) 329.18 454.09 P
1.32 (TNFS-001.02.02, May 24, 1992.) 324 444.09 P
1 F
1.32 ( Pr) 445.95 444.09 P
1.32 (oposed draft standar) 458.19 444.09 P
1.32 (d) 535.5 444.09 P
(for security extensions to NFS for a trusted envir) 324 434.09 T
(onment.) 499.66 434.09 T
2 F
3.57 ([Hitz94] Hitz, D.,Lau, J., Malcolm, M., \322File System) 324 420.91 P
0.16 (Design for an NFS File Server Appliance,\323) 324 410.91 P
1 F
0.16 ( W) 480.18 410.91 P
0.16 (inter USENIX) 489.59 410.91 P
1.76 (Confer) 324 400.91 P
1.76 (ence Pr) 348.67 400.91 P
1.76 (oceedings) 377.83 400.91 P
2 F
1.76 (, USENIX Association, Berkeley) 413.82 400.91 P
1.76 (,) 537.75 400.91 P
0.44 (CA, January 1994.) 324 390.91 P
1 F
0.44 ( Describes a highly integrated appr) 392.38 390.91 P
0.44 (oach) 522.5 390.91 P
0.36 (using a log-based \336le system and nonvolatile RAM to solve) 324 380.91 P
(the write bottleneck on NFS V) 324 370.91 T
(ersion 2.) 431.24 370.91 T
2 F
0.45 ([Howard88] Howard, J.H., M.L. Kazar) 324 357.73 P
0.45 (, S.G. Menees, D.A.) 465.9 357.73 P
1.92 (Nichols, M. Satyanarayanan, R.N. Sidebotham, and M.J.) 324 347.73 P
4.61 (W) 324 337.73 P
4.61 (est, \322Scale and Performance in a Distributed File) 331.78 337.73 P
2.25 (System,\323) 324 327.73 P
1 F
2.25 ( ACM T) 356.75 327.73 P
2.25 (ransactions on Computer Systems) 389.26 327.73 P
2 F
2.25 (6\0501\051.) 522.76 327.73 P
2.91 (February) 324 317.73 P
2.91 (, 1988) 355.9 317.73 P
1 F
2.91 (.) 381.32 317.73 P
2.91 (Primary r) 388.72 317.73 P
2.91 (efer) 427.05 317.73 P
2.91 (ence on the Andr) 440.71 317.73 P
2.91 (ew File) 510.34 317.73 P
1 (System\321contrasts the performance and scalability of AFS) 324 307.73 P
1.32 (and NFS\321cites the lack of consistency guarantees as the) 324 297.73 P
(cause of poor scalability of NFS \336le servers.) 324 287.73 T
2 F
2.01 ([Israel89] Israel, Robert K., Sandra Jett, James Pownell,) 324 274.55 P
1.85 (Geor) 324 264.55 P
1.85 (ge M. Ericson, \322Eliminating Data Copies in UNIX-) 341.83 264.55 P
2.29 (based NFS Servers,\323) 324 254.55 P
1 F
2.29 ( Uniforum Confer) 403.32 254.55 P
2.29 (ence Pr) 472.06 254.55 P
2.29 (oceedings) 501.76 254.55 P
2 F
2.29 (,) 537.75 254.55 P
0.7 (San Francisco, CA, Feb. 27 - Mar. 2, 1989.) 324 244.55 P
1 F
0.7 ( Describes two) 485.1 244.55 P
(methods for reducing data copies in NFS server code.) 324 234.55 T
2 F
5.24 ([Jacobson88] Jacobson, V) 324 221.36 P
5.24 (., \322Congestion Control and) 427.54 221.36 P
2.63 (A) 324 211.36 P
2.63 (voidance,\323) 329.83 211.36 P
1 F
2.63 ( Pr) 368.57 211.36 P
2.63 (oc. ACM SIGCOMM \32488) 382.12 211.36 P
2 F
2.63 (, Stanford, CA,) 479.99 211.36 P
1.97 (August 1988) 324 201.36 P
1.97 (.) 372.22 201.36 P
1 F
1.97 (Describes TCP performance impr) 378.69 201.36 P
1.97 (ovements) 506.51 201.36 P
1.12 (over W) 324 191.36 P
1.12 (ANs and gateways. This work was a starting point) 350.23 191.36 P
(for the NFS Dynamic Retransmission work.) 324 181.36 T
2 F
2.76 ([Joy84a] Joy) 324 168.18 P
2.76 (, Bill, \322Sun Network File Protocol Design) 372.42 168.18 P
0.35 (Considerations,\323 Internal Sun Microsystems technical note) 324 158.18 P
0.35 (,) 537.75 158.18 P
-0.22 (January 1984.) 324 148.18 P
1 F
-0.22 (A description of the basic design principles in) 376.3 148.18 P
0.72 (the NFS pr) 324 138.18 P
0.72 (otocol, rationale and implementation, including) 364.61 138.18 P
(the use of a r) 324 128.18 T
(eply cache for corr) 370.67 128.18 T
(ectness.) 439.07 128.18 T
2 F
3.57 ([Joy84b] Joy) 324 115 P
3.57 (, Bill, \322Design of the Sun Network File) 373.73 115 P
-0.16 (System,\323 Internal Sun Microsystems technical note) 324 105 P
-0.16 (, January) 507.67 105 P
1.48 (1984.) 324 95 P
1 F
1.48 (Design of the implementation, r) 347.98 95 P
1.48 (elationship to VFS,) 467.79 95 P
1.35 (comparison to ND, omissions in design and r) 324 85 P
1.35 (easons, and) 496.15 85 P
(r) 324 75 T
(elated work.) 327.17 75 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
1.06 ([Juszczak89] Juszczak, Chet, \322Improving the Performance) 72 714 P
1.53 (and Correctness of an NFS Server) 72 704 P
1.53 (,\323) 202.03 704 P
1 F
1.53 ( USENIX Confer) 208.28 704 P
1.53 (ence) 271.51 704 P
0.64 (Pr) 72 694 P
0.64 (oceedings) 80.67 694 P
2 F
0.64 (, USENIX Association, Berkeley) 116.66 694 P
0.64 (, CA, January) 237.23 694 P
4.88 (1989, pages 53-63.) 72 684 P
1 F
4.88 (Describes a server r) 157.37 684 P
4.88 (eply cache) 244.89 684 P
0.4 (implementation for work avoidance. Listed as a side-effect,) 72 674 P
2.56 (the r) 72 664 P
2.56 (eply cache avoids the destructive r) 90.98 664 P
2.56 (e-application of) 228.19 664 P
(nonidempotent operations\321impr) 72 654 T
(oving corr) 190.92 654 T
(ectness.) 228.33 654 T
2 F
6.23 ([Juszczak94] Juszczak, Chet, \322Improving the W) 72 640.46 P
6.23 (rite) 276 640.46 P
4.06 (Performance of an NFS Server\323) 72 630.46 P
1 F
4.06 ( USENIX Confer) 203.22 630.46 P
4.06 (ence) 271.51 630.46 P
0.64 (Pr) 72 620.46 P
0.64 (oceedings) 80.67 620.46 P
2 F
0.64 (, USENIX Association, Berkeley) 116.66 620.46 P
0.64 (, CA, January) 237.23 620.46 P
1.29 (1994.) 72 610.46 P
1 F
1.29 (Describes a write gathering technique that exploits) 95.79 610.46 P
4.08 (NFS client implementation parallel write behavior to) 72 600.46 P
(impr) 72 590.46 T
(ove write thr) 88.67 590.46 T
(oughput in NFS V) 134.33 590.46 T
(ersion 2.) 198.09 590.46 T
2 F
3.73 ([Kazar88] Kazar) 72 576.91 P
3.73 (, Michael Leon, \322Synchronization and) 135.59 576.91 P
3.36 (Caching Issues in the Andrew File System,\323) 72 566.91 P
1 F
3.36 ( USENIX) 251.39 566.91 P
1.76 (Confer) 72 556.91 P
1.76 (ence Pr) 96.67 556.91 P
1.76 (oceedings) 125.83 556.91 P
2 F
1.76 (, USENIX Association, Berkeley) 161.82 556.91 P
1.76 (,) 285.75 556.91 P
2.41 (CA, Dallas W) 72 546.91 P
2.41 (inter 1988, pages 27-36.) 127.21 546.91 P
1 F
2.41 (Describes cache) 226.36 546.91 P
1.12 (consistency in AFS and contrasts it with other distributed) 72 536.91 P
(\336le systems.) 72 526.91 T
2 F
0.53 ([Kazar90] Kazar) 72 513.36 P
0.53 (, Michael Leon, Leverett et al., \322DEcorum) 132.38 513.36 P
0.69 (File System Architectural Overview) 72 503.36 P
0.69 (,\323) 203.72 503.36 P
1 F
0.69 ( USENIX Confer) 209.96 503.36 P
0.69 (ence) 271.51 503.36 P
8.36 (Pr) 72 493.36 P
8.36 (oceedings) 80.67 493.36 P
2 F
8.36 (, USENIX Association, Berkeley) 116.66 493.36 P
8.36 (, CA,) 260.39 493.36 P
(Anaheim June 1990.) 72 483.36 T
1 F
(Describes the DCE DFS \336le system.) 148.49 483.36 T
2 F
0.69 ([Kazar94] Kazar) 72 469.82 P
0.69 (, Michael, private communication April 1,) 132.54 469.82 P
(1994.) 72 459.82 T
1 F
(Mike is right\321the r) 94.5 459.82 T
(eply cache is volatile state.) 164.92 459.82 T
2 F
-0.19 ([Macklem91] Macklem, Rick, \322Lessons Learned T) 72 446.27 P
-0.19 (uning the) 254.44 446.27 P
-0.04 (4.3BSD Reno Implementation of the NFS Protocol,\323) 72 436.27 P
1 F
-0.04 ( W) 261.78 436.27 P
-0.04 (inter) 271 436.27 P
2.55 (USENIX Confer) 72 426.27 P
2.55 (ence Pr) 132.46 426.27 P
2.55 (oceedings) 162.42 426.27 P
2 F
2.55 (, USENIX Association,) 198.41 426.27 P
5.12 (Berkeley) 72 416.27 P
5.12 (, CA, January 1991.) 103.9 416.27 P
1 F
5.12 (Describes performance) 198.64 416.27 P
-0.08 (impr) 72 406.27 P
-0.08 (ovement \050r) 88.67 406.27 P
-0.08 (educed CPU loading\051 thr) 126.99 406.27 P
-0.08 (ough elimination of) 217.66 406.27 P
8.29 (data copies in tuning the 4.3BSD Reno NFS) 72 396.27 P
0.61 (implementation, and the performance and use of TCP as a) 72 386.27 P
(transport.) 72 376.27 T
2 F
0.29 ([Macklem94] Macklem, Rick, \322Not Quite NFS, Soft Cache) 72 362.73 P
6.27 (Consistency for NFS,\323) 72 352.73 P
1 F
6.27 ( W) 166.29 352.73 P
6.27 (inter USENIX Confer) 181.81 352.73 P
6.27 (ence) 271.51 352.73 P
0.64 (Pr) 72 342.73 P
0.64 (oceedings) 80.67 342.73 P
2 F
0.64 (, USENIX Association, Berkeley) 116.66 342.73 P
0.64 (, CA, January) 237.23 342.73 P
2.66 (1994.) 72 332.73 P
1 F
2.66 (Describes a cache consistent NFS pr) 97.16 332.73 P
2.66 (otocol, with) 242.84 332.73 P
(extensions similar to the work described her) 72 322.73 T
(e.) 231.16 322.73 T
2 F
7.74 ([McV) 72 309.18 P
7.74 (oy91] McV) 92.33 309.18 P
7.74 (oy) 140.65 309.18 P
7.74 (, L., Kleiman, S., \322Extent-like) 149.06 309.18 P
1.22 (Performance from a UNIX File System,\323) 72 299.18 P
1 F
1.22 ( W) 226.06 299.18 P
1.22 (inter USENIX) 236.53 299.18 P
1.76 (Confer) 72 289.18 P
1.76 (ence Pr) 96.67 289.18 P
1.76 (oceedings) 125.83 289.18 P
2 F
1.76 (, USENIX Association, Berkeley) 161.82 289.18 P
1.76 (,) 285.75 289.18 P
1.04 (CA, January 1991.) 72 279.18 P
1 F
1.04 (Describes a write clustering technique) 144.86 279.18 P
(for UNIX local \336le system writes to impr) 72 269.18 T
(ove thr) 217.92 269.18 T
(oughput.) 242.83 269.18 T
2 F
1.96 ([Mogul92] Mogul, Jef) 72 255.64 P
1.96 (frey C., \322A Recovery Protocol for) 156 255.64 P
9.47 (Spritely NFS,\323) 72 245.64 P
1 F
9.47 ( USENIX File System W) 134.97 245.64 P
9.47 (orkshop) 259 245.64 P
5.59 (Pr) 72 235.64 P
5.59 (oceedings) 80.67 235.64 P
2 F
5.59 (, Ann Arbor) 116.66 235.64 P
5.59 (, MI, USENIX Association,) 171.23 235.64 P
1.54 (Berkeley) 72 225.64 P
1.54 (, CA, May 1992.) 103.9 225.64 P
1 F
1.54 (Second paper on Spritely NFS) 172.83 225.64 P
1.96 (pr) 72 215.64 P
1.96 (oposes a scheme for r) 79.67 215.64 P
1.96 (ecovering state in a consistency) 165.67 215.64 P
(pr) 72 205.64 T
(otocol.) 79.67 205.64 T
2 F
0.42 ([Mogul93] Mogul, Jef) 72 192.09 P
0.42 (frey C., \322Recovery in Spritely NFS,\323) 152.92 192.09 P
4.2 (Research Report 93/2, Digital Equipment Corporation) 72 182.09 P
1.42 (W) 72 172.09 P
1.42 (estern Research Laboratory) 79.78 172.09 P
1.42 (, June 1993.) 180.99 172.09 P
1 F
1.42 (Thir) 230.99 172.09 P
1.42 (d paper on) 246.17 172.09 P
(Spritely NFS describes the implementation of r) 72 162.09 T
(ecovery) 240.66 162.09 T
(.) 268.15 162.09 T
2 F
0.85 ([Moran90] Moran, J., Sandber) 72 148.55 P
0.85 (g, R., Coleman, D., Kepecs,) 183.86 148.55 P
2.79 (J., L) 72 138.55 P
2.79 (yon, B., \322Breaking Through the NFS Performance) 90.04 138.55 P
1.15 (Barrier) 72 128.55 P
1.15 (,\323) 97.13 128.55 P
1 F
1.15 ( Pr) 103.37 128.55 P
1.15 (oceedings of the 1990 Spring Eur) 115.44 128.55 P
1.15 (opean UNIX) 241.61 128.55 P
3.16 (Users Gr) 72 118.55 P
3.16 (oup) 108.07 118.55 P
2 F
3.16 (, Munich, Germany) 121.57 118.55 P
3.16 (, pages 199-206, April) 197.79 118.55 P
2.71 (1990.) 72 108.55 P
1 F
2.71 (Describes the application of nonvolatile RAM in) 97.21 108.55 P
(solving the synchr) 72 98.55 T
(onous write bottleneck in NFS V) 137.16 98.55 T
(ersion 2.) 252.91 98.55 T
2 F
1.07 ([NFS3] Sun Microsystems, Inc., \322NFS V) 72 85 P
1.07 (ersion 3 Protocol) 224.36 85 P
(Speci\336cation,\323 February 16, 1994) 72 75 T
(.) 193.73 75 T
0.53 ([Nelson88a] Nelson, Michael N., Brent B. W) 324 714 P
0.53 (elch and John) 489.45 714 P
4.32 (K. Ousterhout, \322Caching in the Sprite Network File) 324 704 P
2.25 (System,\323) 324 694 P
1 F
2.25 ( ACM T) 356.75 694 P
2.25 (ransactions on Computer Systems) 389.26 694 P
2 F
2.25 (6\0501\051.) 522.76 694 P
0.88 (February) 324 684 P
0.88 (, 1988) 355.9 684 P
1 F
0.88 (.) 379.28 684 P
2 F
0.88 (Also Computing Reviews, V) 384.65 684 P
0.88 (ol. 30, No. 3,) 490.12 684 P
0.98 (March 1989.) 324 674 P
1 F
0.98 ( Caching strategies, consistency pr) 370.96 674 P
0.98 (otocol and) 500.77 674 P
(performance r) 324 664 T
(esults.) 375.41 664 T
2 F
11.88 ([Nelson88b] Nelson, M.N., \322Physical Memory) 324 651.77 P
3.88 (Management in a Network Operating System,\323) 324 641.77 P
1 F
3.88 ( Ph.D.) 512.87 641.77 P
(Thesis) 324 631.77 T
2 F
(. Univ) 347 631.77 T
(. of Calif., Berkeley) 368.92 631.77 T
(. November) 439.82 631.77 T
(, 1988) 481.95 631.77 T
1 F
(.) 504.45 631.77 T
2 F
4.81 ([Nowicki89] Nowicki, Bill, \322T) 324 619.54 P
4.81 (ransport Issues in the) 449.34 619.54 P
5.2 (Network File System,\323 ACM SIGCOMM newsletter) 324 609.54 P
1 F
3.17 (Computer Communication Review) 324 599.54 P
2 F
3.17 (, April 1989.) 454.33 599.54 P
1 F
3.17 (A brief) 512.08 599.54 P
2.58 (description of the basis for the dynamic r) 324 589.54 P
2.58 (etransmission) 490 589.54 P
(work.) 324 579.54 T
2 F
-0.17 ([Ousterhout90] Ousterhout, John K., \322Why aren\325) 324 567.31 P
-0.17 (t Operating) 499.43 567.31 P
0.79 (Systems Getting Faster as Fast as Hardware,\323 Proceedings) 324 557.31 P
0.68 (of the 1990 Summer USENIX Conference, Anaheim, June) 324 547.31 P
-0.18 (1) 324 537.31 P
-0.18 (1-15, 1990.) 328.17 537.31 P
1 F
-0.18 (A description, in part, of the synchr) 371.31 537.31 P
-0.18 (onous write) 497.92 537.31 P
(bottleneck in NFS V) 324 527.31 T
(ersion 2.) 395.24 527.31 T
2 F
1.01 ([POSIX90] Portable Operating System Interface \050POSIX\051,) 324 515.08 P
2.88 (Part) 324 505.08 P
2.88 (1: System Application Program Interface \050API\051 [C) 340.75 505.08 P
(Language] ISO/IEC 9945-1: 1990, IEEE Std 1003.1-1990.) 324 495.08 T
0.67 ([Pawlowski89] Pawlowski, Brian, Ron Hixon, Mark Stein,) 324 482.85 P
0.26 (Joseph T) 324 472.85 P
0.26 (umminaro, \322Network Computing in the UNIX and) 356.19 472.85 P
0.64 (IBM Mainframe Environment,\323) 324 462.85 P
1 F
0.64 (Uniforum \32489 Conf. Pr) 442.91 462.85 P
0.64 (oc.) 527 462.85 P
2 F
0.64 (,) 537.75 462.85 P
1.5 (\0501989\051.) 324 452.85 P
1 F
1.5 (Description of an NFS server implementation for) 354 452.85 P
(IBM\325) 324 442.85 T
(s MVS operating system.) 341.83 442.85 T
2 F
4.8 ([Presto93] Digital Equipment Corporation. \322Guide to) 324 430.61 P
12.07 (Prestoserve,\323) 324 420.61 P
12.07 (DEC OSF/1 Prestoserve Product) 386.05 420.61 P
3.8 (Documentation, Order number AA-PQT) 324 410.61 P
3.8 (OA-TE, March) 481.22 410.61 P
(1993.) 324 400.61 T
5.9 ([RFC1014] Sun Microsystems, Inc., \322External Data) 324 388.39 P
1.09 (Representation Speci\336cation,\323 RFC-1) 324 378.39 P
1.09 (1014, DDN Network) 462.09 378.39 P
2.4 (Information Center) 324 368.39 P
2.4 (, SRI International, Menlo Park, CA) 395.27 368.39 P
2.4 (.) 537.75 368.39 P
1 F
2.39 (Describes canonical data exchange format for use with) 324 358.39 P
(RPC.) 324 348.39 T
2 F
2.5 ([RFC1057] Sun Microsystems, Inc., \322Remote Procedure) 324 336.15 P
0.45 (Call Speci\336cation,\323 RFC-1057, DDN Network Information) 324 326.15 P
(Center) 324 316.15 T
(, SRI International, Menlo Park, CA) 347.63 316.15 T
(.) 478.12 316.15 T
1.3 ([RFC1094] Sun Microsystems, Inc., \322Network Filesystem) 324 303.92 P
4.88 (Speci\336cation,\323 RFC-1094, DDN Network Information) 324 293.92 P
0.67 (Center) 324 283.92 P
0.67 (, SRI International, Menlo Park, CA) 347.63 283.92 P
0.67 (.) 481.48 283.92 P
1 F
0.67 (NFS V) 486.65 283.92 P
0.67 (ersion 2) 510.08 283.92 P
(pr) 324 273.92 T
(otocol speci\336cation.) 331.67 273.92 T
2 F
0.41 ([Reid90] Reid, Jim, \322N\050e\051FS: the Protocol is the Problem,\323) 324 261.69 P
1 F
3.13 (Pr) 324 251.69 P
3.13 (oc. of the UKUUG Confer) 332.67 251.69 P
3.13 (ence) 439.61 251.69 P
2 F
3.13 (, London, July 1990.) 456.1 251.69 P
1 F
(Describes pr) 324 241.69 T
(oblems in NFS V) 369.91 241.69 T
(ersion 2.) 429.66 241.69 T
2 F
1.54 ([Sandber) 324 229.46 P
1.54 (g85] Sandber) 356.33 229.46 P
1.54 (g, R., D. Goldber) 405.94 229.46 P
1.54 (g, S. Kleiman, D.) 472.64 229.46 P
1.56 (W) 324 219.46 P
1.56 (alsh, B. L) 331.78 219.46 P
1.56 (yon, \322Design and Implementation of the Sun) 369.4 219.46 P
2.8 (Network Filesystem,\323) 324 209.46 P
1 F
2.8 (USENIX Confer) 410.84 209.46 P
2.8 (ence Pr) 471.55 209.46 P
2.8 (oceedings) 501.76 209.46 P
2 F
2.8 (,) 537.75 209.46 P
1.93 (USENIX Association, Berkeley) 324 199.46 P
1.93 (, CA, Summer 1985.) 442.01 199.46 P
1 F
1.93 (The) 526.5 199.46 P
1.11 (basic paper describing the SunOS implementation of NFS) 324 189.46 P
(V) 324 179.46 T
(ersion 2) 328.5 179.46 T
(.) 357.75 179.46 T
2 F
3.51 ([Satyanarayanan89] Satyanarayanan, M., \322A Survey of) 324 167.23 P
2.79 (Distributed File Systems,\323) 324 157.23 P
1 F
2.79 ( Annual Review of Computer) 424.84 157.23 P
3.6 (Science) 324 147.23 P
2 F
3.6 (, Annual Reviews, Inc. V) 351.49 147.23 P
3.6 (olume 4, 1989. Also) 455.95 147.23 P
1.83 (available as T) 324 137.23 P
1.83 (echnical Report CMU-CS-89-1) 377.02 137.23 P
1.83 (16, Dept. of) 493.34 137.23 P
0.67 (Comp. Sci., Carnegie Mellon University) 324 127.23 P
0.67 (.) 471.83 127.23 P
1 F
0.67 (A survey of NFS,) 477 127.23 P
-0.14 (AFS and other distributed \336le systems with a compr) 324 117.23 P
-0.14 (ehensive) 509.01 117.23 P
(bibliography) 324 107.23 T
(.) 370.01 107.23 T
2 F
1.27 ([Srinivasan89] Srinivasan, V) 324 95 P
1.27 (., Jef) 429.61 95 P
1.27 (frey C. Mogul, \322Spritely) 447.96 95 P
7.96 (NFS: Implementation and Performance of Cache) 324 85 P
4.95 (Consistency Protocols\323, WRL Research Report 89/5,) 324 75 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
9.19 (Digital Equipment Corporation W) 72 714 P
9.19 (estern Research) 222.09 714 P
-0.03 (Laboratory) 72 704 P
-0.03 (, 100 Hamilton A) 111.4 704 P
-0.03 (ve., Palo Alto, CA, 94301, May) 173.65 704 P
1.54 (1989. Also in Proc. of the T) 72 694 P
1.54 (welfth ACM Symposium on) 181.12 694 P
3.13 (Operating Systems Principals.) 72 684 P
1 F
3.13 (Analysis of a Sprite-like) 192.38 684 P
(consistency pr) 72 674 T
(otocol applied to NFS.) 123.41 674 T
2 F
5.35 ([W) 72 661.12 P
5.35 (elch90] W) 82.77 661.12 P
5.35 (elch, Brent, \322Measured Performance of) 125.14 661.12 P
2.11 (Caching in the Sprite Network File System\323) 72 651.12 P
1 F
2.11 ( Computing) 243.64 651.12 P
1.09 (Systems) 72 641.12 P
2 F
1.09 (, V) 100.49 641.12 P
1.09 (olume 3, Number 4, Summer 1991, pages 315-) 111.42 641.12 P
2.35 (342.) 72 631.12 P
1 F
2.35 (Analyzes the effectiveness of caching in the Sprite) 92.35 631.12 P
0.93 (network \336le system, and the fr) 72 621.12 P
0.93 (equency of concurr) 184.31 621.12 P
0.93 (ent write) 255.32 621.12 P
(sharing.) 72 611.12 T
2 F
0.32 ([W) 72 598.25 P
0.32 (ittle93] W) 83.13 598.25 P
0.32 (ittle, Mark, Bruce Keith, \322LADDIS: The Next) 119.84 598.25 P
4.18 (Generation in NFS File Server Benchmarking\323) 72 588.25 P
1 F
4.18 ( Pr) 262.15 588.25 P
4.18 (oc.) 277.25 588.25 P
1.02 (Summer 1993 USENIX Confer) 72 578.25 P
1.02 (ence) 184.98 578.25 P
2 F
1.02 (, USENIX Association,) 201.46 578.25 P
2.28 (Cincinnati, OH, June 1993, pages 1) 72 568.25 P
2.28 (1) 211.04 568.25 P
2.28 (1-128.) 215.21 568.25 P
1 F
2.28 (Describes a) 242.98 568.25 P
0.08 (synthetic, parallel benchmark used to evaluate NFS V) 72 558.25 P
0.08 (ersion) 265.5 558.25 P
(2 server performance.) 72 548.25 T
2 F
5.02 ([X/OpenNFS] X/Open Company) 72 535.38 P
5.02 (, Ltd., X/Open CAE) 200.44 535.38 P
6.01 (Speci\336cation: Protocols for X/Open Internetworking:) 72 525.38 P
0.19 (XNFS, X/Open Company) 72 515.38 P
0.19 (, Ltd., Apex Plaza, Forbury Road,) 165.05 515.38 P
2.92 (Reading Berkshire, RG1 1AX, United Kingdom, 1991.) 72 505.38 P
1 F
1.44 (Describes the NFS version 2 pr) 72 495.38 P
1.44 (otocol and accompanying) 192.12 495.38 P
-0.06 (pr) 72 485.38 P
-0.06 (otocols, including the Lock Manager and the Portmapper) 79.67 485.38 P
-0.06 (.) 285.75 485.38 P
2 F
2.82 ([X/OpenPCNFS] X/Open Company) 72 472.5 P
2.82 (, Ltd., X/Open CAE) 207.05 472.5 P
6.01 (Speci\336cation: Protocols for X/Open Internetworking:) 72 462.5 P
3.25 (\050PC\051NFS, Developer) 72 452.5 P
3.25 (\325) 151.08 452.5 P
3.25 (s Speci\336cation, X/Open Company) 153.58 452.5 P
3.25 (,) 285.75 452.5 P
1.08 (Ltd., Apex Plaza, Forbury Road, Reading Berkshire, RG1) 72 442.5 P
(1AX, United Kingdom, 1991.) 72 432.5 T
0 10 Q
(Author information) 72 410.96 T
0 9 Q
0.31 (Chet Juszczak) 72 394.75 P
2 F
0.31 ( is a Consultant Engineer in the UNIX Soft-) 127.55 394.75 P
-0.5 (ware Group at Digital where he works on distributed file sys-) 72 384.75 P
-0.42 (tems for commercial servers. He has worked on NFS and file) 72 374.75 P
1.73 (server performance at Digital since 1985. Before that he) 72 364.75 P
0.5 (worked on relational database technologies at AT&T. Chet) 72 354.75 P
0.41 (got his M.S. in C.S. at the University of Michigan in 1983.) 72 344.75 P
0.71 (Reach him electronically at chet@zk3.dec.com or via U.S.) 72 334.75 P
2.75 (Mail at Digital Equipment Corp., 110 Spit Brook Rd.,) 72 324.75 P
(Nashua, NH 03062.) 72 314.75 T
0 F
-0.1 (Brian Pawlowski) 72 299.88 P
2 F
-0.1 ( now resides at Network Appliance Corp.,) 137.15 299.88 P
0.82 (where he works on performance and new architectures for) 72 289.88 P
0.45 (appliances. Brian did the work described here while at Sun) 72 279.88 P
0.78 (Microsystems, Inc., where for six years he worked on dis-) 72 269.88 P
-0.5 (tributed file systems. He led the MVS/NFS project, slummed) 72 259.88 P
0.89 (with AFS and DCE DFS, worked on LADDIS and finally) 72 249.88 P
-0.52 (became aware while watching the pretty colors during a mul-) 72 239.88 P
0.97 (tiprocessor file server performance project that provided a) 72 229.88 P
1.34 (convenient excuse to use some sophisticated performance) 72 219.88 P
-0.42 (visualization tools. Brian has never castrated nor slaughtered) 72 209.88 P
-0.5 (cattle. Reach him electronically at beepy@netapp.com or via) 72 199.88 P
1.57 (snail mail at Network Appliance, 295 N. Bernardo Ave.,) 72 189.88 P
(Mountain View, CA 94043.) 72 179.88 T
0 F
0.09 (Peter Staubach) 72 165 P
2 F
0.09 ( is a staff engineer at SunSoft Inc. He is the) 130.84 165 P
0.73 (project leader, principal designer and engineer on the NFS) 72 155 P
1.03 (Version 3 and NFS over TCP projects. Peter has been in-) 72 145 P
-0.38 (volved with the design and implementation of SunSoft\325s dis-) 72 135 P
0.75 (tributed file system since 1991. Prior to joining Sun, Peter) 72 125 P
0.07 (worked at Lachman Associates where he was involved with) 72 115 P
0.75 (the implementation of NFS for System V and sundry NFS) 72 105 P
11.22 (ports. He can be reached electronically at) 72 95 P
2.03 (staubach@eng.sun.com or via U.S. Mail at SunSoft Inc.) 72 85 P
2.22 (2550 Garcia Ave. MS MTV05-40, Mountain View, CA) 72 75 P
(94043.) 324 714 T
0 F
0.07 (Carl Smith) 324 700 P
2 F
0.07 ( has been a member of the technical staff at Sun) 366.82 700 P
0.41 (for six years. During this time he has been the NFS project) 324 690 P
0.19 (lead, NFS Version 3 co-conspirator, and worked on various) 324 680 P
-0.55 (aspects of NFS, RPC, and TCP/IP. His friends have observed) 324 670 P
0.09 (that he is working his way down the protocol stack. Prior to) 324 660 P
0.5 (Sun he was a jack-of-all-trades at UniSoft Corporation and) 324 650 P
-0.19 (the technical manager and a principal engineer of the Berke-) 324 640 P
1.65 (ley PDP-11 Software Distribution. He has been involved) 324 630 P
1.17 (with UNIX since Version 6. His current interests are net-) 324 620 P
-0.52 (working, security, and retiring early to visit the bookstores of) 324 610 P
7.29 (the world. He can be reached electronically at) 324 600 P
-0.09 (cs@eng.sun.com or via U.S. Mail at SunSoft Inc. 2550 Gar-) 324 590 P
(cia Ave. MS MTV05-44, Mountain View, CA 94043) 324 580 T
0 F
0.15 (Diane Lebel) 324 566 P
2 F
0.15 (is an engineer in the UNIX Software Group at) 372.81 566 P
-0.5 (Digital where she is the principal designer of the DEC OSF/1) 324 556 P
0.42 (NFS client. Diane has worked at Digital since 1987. Reach) 324 546 P
0.22 (her electronically at lebel@zk3.dec.com or via U.S. Mail at) 324 536 P
0.41 (Digital Equipment Corp., 110 Spit Brook Rd., Nashua, NH) 324 526 P
(03062.) 324 516 T
0 F
0.2 (David Hitz) 324 502 P
2 F
0.2 (is a co-founder and director of system architec-) 368.4 502 P
0.78 (ture at Network Appliance Corp. Dave has focused on de-) 324 492 P
-0.28 (signing and implementing the WAFL file system, and on the) 324 482 P
-0.12 (overall design of their file server. He also worked at Auspex) 324 472 P
-0.18 (Systems in the file system group, and at MIPS in the System) 324 462 P
-0.27 (V kernel group. He received his computer science BSE from) 324 452 P
1.22 (Princeton University in 1986. Reach him electronically at) 324 442 P
1.14 (hitz@netapp.com or via snail mail at Network Appliance,) 324 432 P
(295 N. Bernardo Ave., Mountain View, CA 94043.) 324 422 T
0 10 Q
(Trademarks) 324 401.33 T
2 9 Q
1 (NFS is a trademark of Sun Microsystems, Inc. UNIX is a) 324 386 P
-0.14 (registered trademark of UNIX System Laboratories, a whol-) 324 376 P
0.82 (ly-owned subsidiary of Novell, Inc. Prestoserve is a trade-) 324 366 P
(mark of Legato Systems, Inc.) 324 356 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 223 720 715.83 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Appendix 1. Summary of the NFS Version 3 protocol.) 72 709.17 T
2 F
( Notes: fh = file handle, dir_fh = directory file handle, wcc_data = weak cache consistency data.) 300.33 709.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(Pr) 116.17 695.5 T
(ocedur) 124.46 695.5 T
(e) 147.87 695.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Arguments) 217.28 695.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Returns) 332.37 695.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Change fr) 512.05 695.5 T
(om NFS V) 546.35 695.5 T
(ersion 2) 581.17 695.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(0) 80.96 685.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(NULL) 86.96 685.5 T
2 F
(\321do no work) 106.16 685.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(none) 182.63 685.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(none) 292.15 685.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(1) 80.96 675.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
-1.54 (GETATTR) 86.96 675.5 P
2 F
-0.64 (\321Get attributes of) 120.56 675.5 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a \336le) 86.96 666.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh) 182.63 675.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(attributes) 292.15 675.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(File types are defined for sockets and named pipes as well as block and character devices, with) 402.15 675.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(explicit subfields for major and minor device numbers.) 402.15 666.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 80.96 656.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
-0.47 (SETATTR) 86.96 656.5 P
2 F
-0.2 (\321Set attributes of) 120.56 656.5 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a \336le) 86.96 647.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, new attributes) 182.63 656.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(wcc_data) 292.15 656.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Now uses a discriminated union for each field, telling whether the field is to be set \050and how\051,) 402.15 656.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(eliminating unsigned field overloading with) 402.15 647.5 T
3 F
(-1) 544.59 647.5 T
2 F
(. The time fields can be set to either the server\325s) 554.19 647.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(current time or the time supplied by the client.) 402.15 638.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 80.96 628.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(LOOKUP) 86.96 628.5 T
2 F
( a \336le name) 115.76 628.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dir_fh, name) 182.63 628.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, attributes, directory attributes) 292.15 628.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Returns the attributes for the directory searched for more efficient name cache validation.) 402.15 628.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 80.96 618.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(ACCESS) 86.96 618.5 T
2 F
(\321check access) 115.76 618.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(permissions) 86.96 609.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, access mask) 182.63 618.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(attributes, access mask) 292.15 618.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(New procedure, allows over-the-wire access check at open to detect permission failures. Also use-) 402.15 618.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ful for ACL-based implementations.) 402.15 609.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 80.96 599.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(READLINK) 86.96 599.5 T
2 F
(\321read from a) 125.36 599.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(symbolic link) 86.96 590.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh) 182.63 599.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(attributes, symlink data) 292.15 599.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Returns attributes for symbolic link.) 402.15 599.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 80.96 580.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(READ) 86.96 580.5 T
2 F
( data from a \336le) 106.16 580.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, of) 182.63 580.5 T
(fset, count) 199.81 580.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(attributes, count, eof \337ag, data) 292.15 580.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Reply structure includes an) 402.15 580.5 T
3 F
(EOF) 491.47 580.5 T
2 F
( boolean allowing clients to determine efficiently the end of file.) 505.87 580.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 80.96 570.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(WRITE) 86.96 570.5 T
2 F
( data to a \336le) 110.96 570.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, of) 182.63 570.5 T
(fset, count, stable \337ag, data) 199.81 570.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(count, committed \337ag, veri\336er) 292.15 570.5 T
(,) 388.93 570.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(wcc_data) 292.15 561.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(An enumerated field indicates disposition of request. Removed the) 402.15 570.5 T
3 F
(beginoffset) 617.68 570.5 T
2 F
( and) 670.48 570.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(totalcount) 402.15 561.5 T
2 F
( fields in the NFS Version 2 protocol. The reply contains a count so that the server) 450.15 561.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(can write less than the requested amount and correctly indicate this to the client.) 402.15 552.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 80.96 542.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(CREATE) 86.96 542.5 T
2 F
( a \336le) 115.76 542.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dir_fh, name, attributes to apply) 182.63 542.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, attributes, wcc_data) 292.15 542.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Contains an exclusive flag to support exclusive creation of regular files \050in conjunction with an) 402.15 542.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exclusive create verifier\051. Returns wcc_data for directory.) 402.15 533.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 80.96 523.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(MKDIR) 86.96 523.5 T
2 F
(\321create a directory) 110.96 523.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dir_fh, name, attributes to apply) 182.63 523.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, attributes, wcc_data) 292.15 523.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Returns wcc_data for parent directory.) 402.15 523.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 76.96 513.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(SYMLINK) 86.96 513.5 T
2 F
(\321Create a) 120.56 513.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(symbolic link) 86.96 504.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dir_fh, name, attributes to apply) 182.63 513.5 T
(,) 284.77 513.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(data) 182.63 504.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, attributes, wcc_data) 292.15 513.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Returns wcc_data for directory and a file handle and attributes for the symlink.) 402.15 513.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 77.25 494.5 T
(1) 80.96 494.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(MKNOD) 86.96 494.5 T
2 F
(\321Create a special) 110.96 494.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(device) 86.96 485.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dir_fh, name, attributes to apply) 182.63 494.5 T
(,) 284.77 494.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(special data) 182.63 485.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, attributes, wcc_data) 292.15 494.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(New procedure allows creation of special files without overloading the fields in the) 402.15 494.5 T
3 F
(CREATE) 670.77 494.5 T
2 F
( pro-) 699.57 494.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cedure.) 402.15 485.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 76.96 475.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(REMOVE) 86.96 475.5 T
2 F
( a \336le) 115.76 475.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dir_fh, name) 182.63 475.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(wcc_data) 292.15 475.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Returns wcc_data for directory.) 402.15 475.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 76.96 465.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(RMDIR) 86.96 465.5 T
2 F
(\321remove a directory) 110.96 465.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(dir_fh, name) 182.63 465.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(wcc_data) 292.15 465.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Returns wcc_data for parent directory.) 402.15 465.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 76.96 455.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(RENAME) 86.96 455.5 T
2 F
( a \336le) 115.76 455.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(source dir_fh, source name,) 182.63 455.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tar) 182.63 446.5 T
(get dir_fh, tar) 190.93 446.5 T
(get name) 234.55 446.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(wcc_data, wcc_data) 292.15 455.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Returns wcc_data for both directories.) 402.15 455.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 76.96 436.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(LINK) 86.96 436.5 T
2 F
(\321create a hard link) 106.16 436.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, tar) 182.63 436.5 T
(get dir_fh, name) 201.59 436.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(attributes, wcc_data) 292.15 436.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Returns wcc_data for directory) 402.15 436.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 76.96 426.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(READDIR) 86.96 426.5 T
2 F
(\321read directory) 120.56 426.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(entries) 86.96 417.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, cookie, veri\336er) 182.63 426.5 T
(, count) 241.4 426.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(directory attributes, veri\336er) 292.15 426.5 T
(,) 379.59 426.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(entries) 292.15 417.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Arguments include a verifier to allow the server to validate the directory offset. Returns attributes) 402.15 426.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for directory) 402.15 417.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 76.96 407.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(READDIRPLUS) 86.96 407.5 T
2 F
(\321Read) 139.76 407.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(directory entries/attributes) 86.96 398.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, cookie, veri\336er) 182.63 407.5 T
(, count,) 241.4 407.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(maximum size) 182.63 398.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(directory attributes, veri\336er) 292.15 407.5 T
(,) 379.59 407.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(entries) 292.15 398.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(New procedure returns file handle and attributes in addition to directory entries.) 402.15 407.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 76.96 388.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(FSSTAT) 86.96 388.5 T
2 F
(\321volatile \336le) 115.76 388.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(system information) 86.96 379.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh) 182.63 388.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(attributes, \336le system utilization) 292.15 388.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Reply includes total size and free space in a file system in bytes \050removing the ambiguous notion) 402.15 388.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of blocks as the file system size\051, total number of files and free file slots, and an estimate of the) 402.15 379.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time between file system modifications \050for cache consistency checking algorithms\051.) 402.15 370.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 76.96 360.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(FSINFO) 86.96 360.5 T
2 F
(\321Get static \336le) 115.76 360.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(system information) 86.96 351.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh) 182.63 360.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(attributes, \336le system properties) 292.15 360.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Provides nonvolatile file system information including preferred/maximum read/write transfer) 402.15 360.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (size, and flags stating whether links or symbolic links are supported. Also includes preferred trans-) 402.15 351.5 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fer sizes for) 402.15 342.5 T
3 F
(READDIR) 441.91 342.5 T
2 F
( and) 475.51 342.5 T
3 F
(READDIRPLUS) 491.06 342.5 T
2 F
(, the server time granularity, and an indication of) 543.86 342.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(whether times may be set in a) 402.15 333.5 T
3 F
(SETATTR) 499.25 333.5 T
2 F
( request.) 532.85 333.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 76.96 323.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(PATHCONF) 86.96 323.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(fh) 182.63 323.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(attributes, POSIX information) 292.15 323.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (Retrieve POSIX info\321maximum name length, number links, etc. supported by remote file system.) 402.15 323.5 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(This procedures has been removed from the MOUNT protocol and put in NFS where it belongs) 402.15 314.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 76.96 304.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(COMMIT) 86.96 304.5 T
2 F
( data on server to) 115.76 304.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(stable storage) 86.96 295.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fh, of) 182.63 304.5 T
(fset, count) 199.81 304.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(wcc_data, veri\336er) 292.15 304.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Provides the synchronization mechanism for asynchronous writes.) 402.15 304.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
73.04 701.58 73.04 292.08 2 L
V
0.5 H
0 Z
N
85.96 702.08 85.96 291.58 2 L
V
N
181.63 702.08 181.63 291.58 2 L
V
N
291.15 702.08 291.15 291.58 2 L
V
N
401.15 702.08 401.15 291.58 2 L
V
N
718.96 701.58 718.96 292.08 2 L
V
N
72.79 701.83 719.21 701.83 2 L
V
N
72.79 691.83 719.21 691.83 2 L
V
2 H
N
72.79 681.83 719.21 681.83 2 L
V
0.5 H
N
72.79 662.83 719.21 662.83 2 L
V
N
72.79 634.83 719.21 634.83 2 L
V
N
72.79 624.83 719.21 624.83 2 L
V
N
72.79 605.83 719.21 605.83 2 L
V
N
72.79 586.83 719.21 586.83 2 L
V
N
72.79 576.83 719.21 576.83 2 L
V
N
72.79 548.83 719.21 548.83 2 L
V
N
72.79 529.83 719.21 529.83 2 L
V
N
72.79 519.83 719.21 519.83 2 L
V
N
72.79 500.83 719.21 500.83 2 L
V
N
72.79 481.83 719.21 481.83 2 L
V
N
72.79 471.83 719.21 471.83 2 L
V
N
72.79 461.83 719.21 461.83 2 L
V
N
72.79 442.83 719.21 442.83 2 L
V
N
72.79 432.83 719.21 432.83 2 L
V
N
72.79 413.83 719.21 413.83 2 L
V
N
72.79 394.83 719.21 394.83 2 L
V
N
72.79 366.83 719.21 366.83 2 L
V
N
72.79 329.83 719.21 329.83 2 L
V
N
72.79 310.83 719.21 310.83 2 L
V
N
72.79 291.83 719.21 291.83 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 16
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-Roman
%%+ Courier
%%+ ZapfDingbats
%%+ Courier-Bold
%%+ Helvetica
%%+ Times-BoldItalic
%%+ Symbol
%%EOF

